


//UNFINISHED - Roughly half done, not usable.



//To install this FGD:
//1. Open Hammer.
//2. Click 'Tools'.
//3. Click 'Options'.
//4. Select the files in the 'Game Data files' window and press 'Remove' to remove it from Hammer (the files will still exist on your computer, so you can put them back at any time).
//5. Click 'Add' and browse to this file's location on your computer.
//Submit queries here: https://discord.gg/ZW59whj Even if you just have a question, it may help me improve this FGD.
//Wanna help me out? Search "TODO:" in this file.
//Derivatives are allowed to be made and distributed.
@mapsize(-16384, 16384)
@MaterialExclusion //Texture folders to not load. You can remove everything from this list if you want, but you probably won't ever use these, they'll make more clutter in Hammer's texture browser, and you'll probably be better off making your own brush/sprite/whatever-friendly versions of them anyway.
[
	"animated_wallpanels"
	"backpack"
	"br_debris"
	"console"
	"debug"
//	"detail" //detail sprites. doesn't seem to break anything if excluded but I can see it happening
//	"editor" //can't exclude editor because editor/wireframe is needed by Hammer itself
	"engine"
	"hud"
	"logo"
	"paint"
	"paintblobs"
//	"particle" //not excluded since some entity defaults use textures in here
	"skybox" //skies. trust me, it's easier to view them on VDC
	"traincar_interior" //Super 8 teaser
//	"vgui" //vgui_slideshow_display uses this folder
	"voice"
]
@AutoVisGroup = "Custom" //Custom visgroups under the auto tab
[
	"AI"
	[
		"ai_relationship"
	]
	"Gameplay Helpers"// color(0 255 0)
	[
		"func_noportal_volume"
		"func_portal_bumper"
		"func_portal_orientation"
		"info_placement_helper"
	]
	"Interactive things"
	[
		"func_breakable"
		"func_breakable_surf"
		"func_button"
		"func_door"
		"func_door_rotating"
		"func_fish_pool"
		"func_guntarget"
		"func_rot_button"
		"func_tracktrain"
		"func_weight_button"
	]
	"Lighting & Light FX"// color(160 240 37)
	[
		"env_lightglow"
		"env_particlelight"
		"env_projectedtexture"
		"env_tonemap_controller"
	]
	"Logic"// color(248 155 0)
	[
		"ai_script_conditions"
		"env_entity_maker"
		"env_firesensor"
		"env_firesource"
		"env_global"
		"env_player_surface_trigger"
		"filter_activator_class"
		"filter_activator_context"
		"filter_activator_mass_greater"
		"filter_activator_model"
		"filter_activator_name"
		"filter_activator_team"
		"filter_damage_type"
		"filter_multi"
		"filter_player_held"
		"func_portal_detector"
		"func_portalled"
		"game_ui"
		"info_game_event_proxy"
		"info_landmark"
		"info_landmark_entry"
		"info_landmark_exit"
		"info_player_ping_detector"
	]
	"Misc"
	[
		"env_entity_dissolver"
		"env_entity_igniter"
		"func_instance_io_proxy"
		"func_tank"
		"generic_actor"
		"hammer_updateignorelist"
		"info_null"
		"info_target"
	]
	"Moving things"
	[
		"func_button"
		"func_door"
		"func_door_rotating"
		"func_guntarget"
		"func_movelinear"
		"func_physbox"
		"func_physbox_multiplayer"
		"func_rot_button"
		"func_rotating"
		"func_tracktrain"
		"func_train"
		"func_water_analog"
	]
	"Optimization"// color(0 180 0)
	[
		"env_detail_controller"
		"func_areaportal"
		"func_areaportalwindow"
		"func_occluder"
	]
	"Physics"// color(255 0 255)
	[
		"env_physexplosion"
		"env_physimpact"
		"env_wind"
		"func_clip_vphysics"
		"func_physbox"
		"func_physbox_multiplayer"
		"func_weight_button"
		"info_constraint_anchor"
		"info_mass_center"
	]
	"Player Spawns"
	[
		"info_coop_spawn"
		"info_player_start"
	]
	"Sound"// color(0 0 255)
	[
		"ambient_generic"
		"env_microphone"
		"env_soundscape"
		"env_soundscape_proxy"
		"env_soundscape_triggerable"
	]
	"Test Elements"// color(0 255 0)
	[
		"env_portal_laser"
		"futbol_catcher"
		"hot_potato"
		"hot_potato_catcher"
		"hot_potato_spawner"
		"info_paint_sprayer"
	]
	"Visual"// color(255 203 11)
	[
		"beam_spotlight"
		"color_correction"
		"color_correction_volume"
		"env_ambient_light"
		"env_ar2explosion"
		"env_beam"
		"env_blood"
		"env_bubbles"
		"env_citadel_energy_core"
		"env_dustpuff"
		"env_dusttrail"
		"env_embers"
		"env_explosion"
		"env_fade"
		"env_fire"
		"env_fire_trail"
		"env_fog_controller"
		"env_funnel"
		"env_gunfire"
		"env_hudhint"
		"env_instructor_hint"
		"env_laser"
		"env_portal_credits"
		"env_screenoverlay"
		"env_shake"
		"env_shooter"
		"env_smokestack"
		"env_smoketrail"
		"env_spark"
		"env_splash"
		"env_sporeexplosion"
		"env_sprite"
		"env_sprite_clientside"
		"env_sprite_oriented"
		"env_spritetrail"
		"env_steam"
		"env_sun"
		"env_texturetoggle"
		"env_viewpunch"
		"env_zoom"
		"fog_volume"
		"func_detail_blocker"
		"func_dustcloud"
		"func_dustmotes"
		"func_fish_pool"
		"func_monitor"
		"func_smokevolume"
		"game_text"
		"info_camera_link"
		"info_particle_system"
		"info_projecteddecal"
		"infodecal"
	]
]

//SE BASE SPECIAL CLASSES
@BaseClass = Angles 
[
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "0 0 0" : "This entity's orientation in the world. Pitch is rotation around the object's Y axis (looking up or down), yaw is rotation around the object's Z axis (looking left and right), roll is rotation around the object's X axis (similar to a person doing cartwheels)."
	input SetLocalAngles(string) : "Sets Pitch Yaw Roll."
]
@BaseClass = DamageFilter 
[
	damagefilter(filterclass) : "Damage Filter Name" :  : "When this entity receives damage, it will filter by this entity."
	input SetDamageFilter(target_destination) : "Sets Damage Filter."
]
@BaseClass = EnableDisable 
[
	StartDisabled(boolean) : "Start Disabled" : 0 : "Stay inactive until Enabled."
	input Enable(void) : "Makes the entity active."
	input Disable(void) : "Makes the entity inactive."
]
@BaseClass = FadeKeys 
[
	fademindist(float) : "Start Fade Distance" : -1 : "Distance at which the entity starts fading. If less than 0, the entity will disappear instantly when the End Fade Distance is hit. The value will scale appropriately if the entity is in a 3D Skybox."
	fademaxdist(float) : "End Fade Distance" : 0 : "Distance at which the entity ends fading. If less than 0, the entity won't disappear at all. The value will scale appropriately if the entity is in a 3D Skybox."
]
//Many entities force a particular model, so keeping this in CBaseAnimating wouldn't be the most intuitive... 
@BaseClass = Model 
[
	model(studio) : "World Model" :  : "A path to a .mdl."
]
@BaseClass = Origin 
[
	origin(origin) : "Origin (X Y Z)" :  : "The point in the world that acts as sort of center of the entity. Rotating entities typically rotate around their origin. Changing the origin with AddOutput or SetLocalOrigin usually results in the entity moving."
]
@BaseClass = Parent 
[
	parentname(target_destination) : "Parent" :  : "Specifies a movement parent. An entity with a parent will be forced to maintain its current position relative to the specified entity. Child entities cannot be moved in any other way and will intersect with other solid objects if they must. Parented entities will forward Use inputs to their parent.\n" +
	"An attachment point for this entity to follow can be specified by putting its name after the parent entity's name, separated by a comma. View attachment points ingame with ent_attachments.\n" +
	"Entities which aren't intended to be parented may not function correctly. phys_constraint can be used as an alternative to parenting."
	input SetParent(target_destination) : "Sets Parent."
	input SetParentAttachment(string) : "Teleports this entity to a specific attachment point on its Parent and moves identically to that attachment point."
	input SetParentAttachmentMaintainOffset(string) : "Same as SetParentAttachment, but the entity is not teleported and instead keeps its current position and angles, until the attachment moves."
	input ClearParent(void) : "Sets the Parent keyvalue to be blank, removing this entity from any hierarchy."
]
@BaseClass = Reflection 
[
	drawinfastreflection(boolean) : "Render in Fast Reflections" : 1 : "Makes the entity be rendered in reflections from water materials using $reflectonlymarkedentities."
	input EnableDrawInFastReflection(void) : "Sets Render in Fast Reflections to true."
	input DisableDrawInFastReflection(void) : "Sets Render in Fast Reflections to false."
]
@BaseClass = RenderMode 
[
	rendermode(choices) : "Render Mode" : 0 : "A special rendering mode to use on this entity. (https://developer.valvesoftware.com/wiki/Render_Modes)" =
	[
		0 : "Normal"
		1 : "Color"
		2 : "Texture"
		3 : "Glow"
		4 : "Solid/Alphatest"
		5 : "Additive"
		7 : "Additive Fractional Frame"
		8 : "Alpha Add"
		9 : "World Space Glow"
		10 : "Don't Render"
	]
]
@BaseClass = RenderAmount 
[
	renderamt(integer) : "Render Amount/Transparency" : 255 : "Transparency amount. Requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
	input Alpha(integer) : "Sets Render Amount/Transparency."
]
@BaseClass = RenderColor 
[
	rendercolor(color255) : "Render Color (R G B)" : "255 255 255" : "Color channel filter to add to this entity's texture(s)."
	input Color(color255) : "Sets Render Color."
]
@BaseClass base(RenderAmount,RenderColor) = RenderAlphaColor 
[
]
@BaseClass base(RenderMode,RenderAmount,RenderColor) = RenderFields 
[
]
@BaseClass = Skin 
[
	skin(integer) : "Skin" : 0 : "Some models have multiple skins. This value selects from the index, starting with 0."
	input Skin(integer) : "Sets Skin."
]
@BaseClass = SystemLevel 
[
	mincpulevel(choices) : "Minimum CPU Level" : 1 : "A user with the 'effect detail' setting below this level will not see this object." =
	[
		1 : "Low"
		2 : "Medium"
		3 : "High"
	]
	maxcpulevel(choices) : "Maximum CPU Level" : 3 : "A user with the 'effect detail' setting above this level will not see this object." =
	[
		1 : "Low"
		2 : "Medium"
		3 : "High"
	]
	mingpulevel(choices) : "Minimum GPU Level" : 1 : "A user with the 'shader detail' setting below this level will not see this object." =
	[
		1 : "Low"
		2 : "Medium"
		3 : "High"
		4 : "Very High"
	]
	maxgpulevel(choices) : "Maximum GPU Level" : 4 : "A user with the 'shader detail' setting above this level will not see this object." =
	[
		1 : "Low"
		2 : "Medium"
		3 : "High"
		4 : "Very High"
	]
]
@BaseClass = Toggle 
[
	input Toggle(void) : "If on, turn off. If off, turn on."
]
@BaseClass base(Reflection,Parent) = VisibleBrush 
[
	_minlight(float) : "Minimum Light" : 0 : "Minimum amount of light to hit this brush. 0 is none, 1 is 'fullbright'. Useful because the lightmaps will not update as the entity moves."
	disableflashlight(boolean) : "Disable Flashlight" : 0 : "Adds EF_NOFLASHLIGHT to this entity. (No shadows cast when lit by env_projectedtexture.)"
	shadowdepthnocache(choices) : "Projected Texture Cache" : 0 : "Tells env_projectedtextures if this object's shadow needs to be updated every frame, or if it's static and the data for it can be cached (thereby saving some resources)." =
	[
		0 : "Default"
		1 : "No cache - render every frame (adds EF_SHADOWDEPTH_NOCACHE)"
		2 : "Cache it - render only once"
	]
	vrad_brush_cast_shadows(choices) : "Shadows (lightmap)" : 0 : "Determines if this entity will cast lightmap shadows." =
	[
		0 : "No shadows"
		1 : "Cast shadows"
	]
	input EnableDraw(void) : "Removes EF_NODRAW from the entity."
	input DisableDraw(void) : "Applies EF_NODRAW to the entity. Note that this is different than Render Mode 10."
	input RemovePaint(void) : "Removes gel."
]

//SE BASE CLASSES
@BaseClass = CBaseEntity 
[
	targetname(target_source) : "Name" :  : "The name that other entities refer to this entity by. TIP: avoid naming an entity the same thing as any classname to avoid issues with code that tries searching by targetname *and* classname."
	globalname(string) : "Global Entity Name" :  : "Name by which this entity is linked to another entity in the map. When a new round begins, entities in the next round with Global Entity Names matching entities in the previous will copy the previous entity's state. TODO: Describe what this is useful for, especially in multiplayer..."
	hammerid(integer) : "Hammer ID" :  : "An ID (usually) automatically assigned to this entity by Hammer. Used by some debugging commands, such as ent_keyvalue. Entities spawned at run-time are not assigned any Hammer ID."
	vscripts(scriptlist) : "Entity Scripts" :  : "VScript files the entity should execute after the world has completely loaded and all entities have spawned. The scripts are all executed in the same script scope, later ones overwriting any identical variables and functions."
	thinkfunction(string) : "Script think function" :  : "Name of a function in this entity's scripts which will be called automatically ten times a second for the duration of the script. It can be used to create timers or to simulate autonomous behavior. The return value (if present) will set the time until the next call. Expensive operations in this function can cause performance problems."
	input Kill(void) : "Removes this entity and any entities parented to it from the world."
	input KillHierarchy(void) : "Functions the same as Kill, although this entity and any entities parented to it are killed on the same frame. TODO: Cases where this is needed?"
	input AddOutput(string) : "Changes a keyvalue or adds an I/O connection on this entity. Not all keyvalues will work with this input as they require special handling.\n" +
	"Keyvalue format: <key> <value>\n" +
	"IO format: <output name> <targetname>:<input name>:<parameter>:<delay>:<fire once>\n" +
	"The parameter can be left blank, but do not omit either ':' surrounding it or the game will think the delay is the parameter! <fire once> is whether the IO event can be fired again. Put 0 to allow infinite refires, put 1 to make it only fire once ever."
	input FireUser1(void) : "Fires the OnUser1 output."
	input FireUser2(void) : "Fires the OnUser2 output."
	input FireUser3(void) : "Fires the OnUser3 output."
	input FireUser4(void) : "Fires the OnUser4 output."
	input RunScriptFile(script) : "Executes a VScript file from disk, without file extension. The script contents are merged with the script scope of the receiving entity."
	input RunScriptCode(string) : "Executes a string of VScript source code in the scope of the entity receiving the input. String quotation may be needed when fired via console. Never try to pass string parameters to a script function with this input. It will minorly corrupt the VMF structure because of the nested quotation marks, which then must be removed manually with a text editor."
	input SetLocalOrigin(string) : "Sends this entity to a spot in the map if not parented to anything. If the entity is parented to something, it will be offset from the parent by this amount."
	output OnUser1(void) : "Fires in response to the FireUser1 input."
	output OnUser2(void) : "Fires in response to the FireUser2 input."
	output OnUser3(void) : "Fires in response to the FireUser3 input."
	output OnUser4(void) : "Fires in response to the FireUser4 input."
]
@BaseClass base(CBaseEntity,Parent,Angles,FadeKeys,RenderFields,SystemLevel,Reflection) = CBaseAnimating 
[
	body(integer) : "Body Group" : 0 : "Sets the the active $bodygroup."
	playbackrate(float) : "Playback Rate" :  : "A multiplier of the speed at which the current animation will be played, negative values are accepted. The model will go back to its regular animation speed once its current one finishes."
	cycle(float) : "Cycle" :  : "How far along the model is through playing its current animation, as a range from 0-1. This can be changed with AddOutput."
	LightingOrigin(target_destination) : "Lighting Origin" :  : "An entity from which to sample lighting instead of the entity's origin. It cannot be any internal entity, including info_lighting."
	fadescale(float) : "Fade Scale" : 1 : "If specified in the worldspawn, or if the game is running below DirectX 8, entities will fade out even if the Start/End Fade Distance keyvalues aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out farther away, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether. See also $noforcedfade."
	modelscale(float) : "Model Scale" : 1 : "A multiplier for the size of the model. Negative values are accepted. Does not scale the individual pieces that make up physics meshes, but will scale the distances between them."
	glowbackfacemult(float) : "Glow Backface Multiplier" : 1 : "If this object has a glow effect, multiply the effect by this much on the sides of the object that are facing away from the viewer."
	SuppressAnimSounds(boolean) : "No Animation Sounds" : 0 : "Silences sounds linked to animations."
	shadowdepthnocache(choices) : "Projected Texture Cache" : 0 : "Tells env_projectedtextures if this object's shadow needs to be updated every frame, or if it's static and the data for it can be cached (thereby saving some resources)." =
	[
		0 : "Default"
		1 : "No cache - render every frame (adds EF_SHADOWDEPTH_NOCACHE)"
		2 : "Cache it - render only once"
	]
	disableflashlight(boolean) : "Disable Flashlight" : 0 : "Adds EF_NOFLASHLIGHT to this entity. (No shadows cast when lit by env_projectedtexture.)"
	input SetBodyGroup(integer) : "Sets the Body Group keyvalue."
	input Ignite(void) : "Makes the entity catch on fire indefinitely."
	input IgniteLifetime(float) : "Makes the entity catch on fire for a given amount of time."
	input BecomeRagdoll(void) : "Kills the entity and creates a client-side ragdoll from the model. The model must have $collisionjoints, otherwise it may cause bugs. See also: phys_convert."
	input SetLightingOrigin(target_destination) : "Sets Lighting Origin."
	input EnableDamageForces(void) : "Allows the entity to be pushed by damage done to it (usually force amount correlates with the damage done)."
	input DisableDamageForces(void) : "Prevents the entity from being pushed by damage done to it."
	input EnableShadow(void) : "Adds _rt_shadows shadows to the entity."
	input DisableShadow(void) : "Removes _rt_shadows shadows from the entity."
	input EnableDraw(void) : "Removes EF_NODRAW from the entity."
	input DisableDraw(void) : "Applies EF_NODRAW to the entity. Note that this is different than Render Mode 10."
	input EnableReceivingFlashlight(void) : "Makes it so that the entity is lit by env_projectedtextures."
	input DisableReceivingFlashlight(void) : "Prevents the entity from being lit by env_projectedtextures. The shadow made by the projected texture will still cast."
	output OnIgnite(void) : "Fired when the entity catches fire, such as from an env_entity_igniter or the Ignite inputs."
	output OnFizzled(void) : "Fired when this entity is fizzled by a fizzler or any other means."
]
@BaseClass base(CBaseEntity,VisibleBrush,DamageFilter,Origin) = CBaseButton 
[
	spawnflags(flags) =
	[
		1 : "Don't move" : 0
		32 : "Toggle - Button can be sent back to its original position at any time. Otherwise, only when Delay Before Reset is over." : 0
		256 : "Touch Activates - OnPressed fires when players physically bump into the button." : 0
		512 : "Damage Activates - OnPressed fires when the entity is hit. Does not affect OnDamaged." : 0
		1024 : "Use Activates - OnPressed fires when the entity is +used." : 1
		2048 : "Starts locked" : 0
	]
	speed(integer) : "Speed" :  : "The speed that the button moves, in units per second or degrees per second if rotating."
	wait(integer) : "Delay Before Reset (-1 stay)" :  : "Amount of time in seconds after the button has moved to the pressed position before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns."
	sounds(choices) : "Press Sound 1" : 0 : "Sound to play when pressed and unlocked." =
	[
		0 : "None"
		2 : "Access denied 1"
		8 : "Access denied 2"
		10 : "Access denied 3"
		11 : "Access denied 4"
		3 : "Access granted"
		9 : "Beep 1"
		15 : "Beep 2"
		16 : "Beep 3"
		17 : "Beep 4"
		18 : "Beep 5"
		19 : "Beep 6"
		34 : "Beep 7"
		40 : "Combine lock 1"
		41 : "Combine lock 2"
		42 : "Combine lock 3"
		43 : "Combine lock 4"
		45 : "Combine lock 5"
		47 : "Combine lock 6"
		12 : "Door locked"
		13 : "Door opened"
		1 : "Light hum"
		5 : "Machine 1"
		6 : "Machine 2"
		4 : "Moving parts 1"
		21 : "Moving parts 2"
		22 : "Moving parts 3"
		23 : "Moving parts 4"
		24 : "Moving parts 5"
		25 : "Moving parts 6"
		26 : "Moving parts 7"
		27 : "Moving parts 8"
		28 : "Moving parts 9"
	]
	unlocked_sound(choices) : "Press Sound 2" : 0 : "Sound played when the button is pressed while unlocked. If set, the sound that plays alternates between this and Press Sound 1, even if the first one is set to None." =
	[
		0 : "None"
		2 : "Access denied 1"
		8 : "Access denied 2"
		10 : "Access denied 3"
		11 : "Access denied 4"
		3 : "Access granted"
		9 : "Beep 1"
		15 : "Beep 2"
		16 : "Beep 3"
		17 : "Beep 4"
		18 : "Beep 5"
		19 : "Beep 6"
		34 : "Beep 7"
		40 : "Combine lock 1"
		41 : "Combine lock 2"
		42 : "Combine lock 3"
		43 : "Combine lock 4"
		45 : "Combine lock 5"
		47 : "Combine lock 6"
		12 : "Door locked"
		13 : "Door opened"
		1 : "Light hum"
		5 : "Machine 1"
		6 : "Machine 2"
		4 : "Moving parts 1"
		21 : "Moving parts 2"
		22 : "Moving parts 3"
		23 : "Moving parts 4"
		24 : "Moving parts 5"
		25 : "Moving parts 6"
		26 : "Moving parts 7"
		27 : "Moving parts 8"
		28 : "Moving parts 9"
	]
	locked_sound(choices) : "Locked Sound" : 2 : "Sound played when the player tries to use the button, and fails because it's locked." =
	[
		0 : "None"
		2 : "Access denied 1"
		8 : "Access denied 2"
		10 : "Access denied 3"
		11 : "Access denied 4"
		3 : "Access granted"
		9 : "Beep 1"
		15 : "Beep 2"
		16 : "Beep 3"
		17 : "Beep 4"
		18 : "Beep 5"
		19 : "Beep 6"
		34 : "Beep 7"
		40 : "Combine lock 1"
		41 : "Combine lock 2"
		42 : "Combine lock 3"
		43 : "Combine lock 4"
		45 : "Combine lock 5"
		47 : "Combine lock 6"
		12 : "Door locked"
		13 : "Door opened"
		1 : "Light hum"
		5 : "Machine 1"
		6 : "Machine 2"
		4 : "Moving parts 1"
		21 : "Moving parts 2"
		22 : "Moving parts 3"
		23 : "Moving parts 4"
		24 : "Moving parts 5"
		25 : "Moving parts 6"
		26 : "Moving parts 7"
		27 : "Moving parts 8"
		28 : "Moving parts 9"
	]
	input Lock(void) : "Locks the button, preventing it from functioning."
	input Unlock(void) : "Unlocks the button, allowing it to function."
	input Press(void) : "Activates the button as if it was pressed."
	input PressIn(void) : "Activates the button as if it was pressed, sending it to the pressed position."
	input PressOut(void) : "Unpresses the button, sending it to the unpressed position."
	output OnDamaged(void) : "Fires when the button is damaged."
	output OnPressed(void) : "Fires when the button is pressed."
	output OnUseLocked(void) : "Fires when the button is pressed but locked."
	output OnIn(void) : "Fires when the button reaches the in/pressed position."
	output OnOut(void) : "Fires when the button reaches the out/released position."
]
@BaseClass base(CBaseEntity,VisibleBrush,Origin) = CBaseDoor 
[
	spawnflags(flags) =
	[
		4 : "Non-solid to Player (not compatible with Ignore Debris as that also sets a collision group)" : 0
		8 : "Passable - Door is solid to nothing at all." : 0
		32 : "Toggle - Door can be closed by +use even if Delay Before Reset is not over." : 0
		256 : "Use Opens" : 1
		1024 : "Touch Opens - When player touches the door, counts as an attempt to open it." : 0
		2048 : "Starts locked" : 0
		4096 : "Door Silent" : 0
		65536 : "If closing, allow Use to reopen." : 0
	]
	wait(integer) : "Delay Before Reset (-1 stay)" : 1 : "Amount of time in seconds after the door has moved to the open position before it returns to the closed position. Once it has returned, it can be used again. If the value is set to -1, the door never returns."
	speed(integer) : "Speed" : 200 : "The speed that the door moves, in units per second or degrees per second if rotating."
	noise1(sound) : "Start Sound" :  : "Sound to play when the door starts moving. If Start Close Sound is specified, this sound only plays when the door starts opening."
	noise2(sound) : "Stop Sound" :  : "Sound to play when the door stops moving. If Stop Close Sound is specified, this sound only plays when the door starts closing."
	startclosesound(sound) : "Start Close Sound" :  : "Sound to play when the door starts closing."
	closesound(sound) : "Stop Close Sound" :  : "Sound to play when the door stops closing."
	locked_sound(sound) : "Locked Sound" :  : "Sound played when the player tries to open the door, and fails because it's locked."
	unlocked_sound(sound) : "Unlocked Sound" :  : "Sound played when door is pressed and unlocked."
	chainstodoor(target_destination) : "Linked Door" :  : "Passes the door's +use inputs and touch events onto a different door, so it also is activated."
	forceclosed(boolean) : "Force Closed" : 0 : "Damages things that block the door. (Or attempts to push it out, if the blocker is an umdamageable physics object.) Useful for doors that have to close even if the player tries to block them with objects. Requires Blocking Damage be set to a non-zero value."
	dmg(float) : "Blocking Damage" : 1 : "Amount of damage done to entities that block the movement of this door, per tick. Requires Force Closed to be set to Yes."
	spawnpos(choices) : "Spawn Position" : 0 : "The door will spawn in this position. Does NOT change what positions are considered 'open' or 'closed'." =
	[
		0 : "Closed"
		1 : "Open"
	]
	loopmovesound(boolean) : "Loop Moving Sound?" : 0 : "Makes the door's Start Sound loop until the door finishes moving. BUG: If an already-looping sound is played with this enabled, it can continue forever. Further attempts to open or close the door will only add another looping sample to the noise."
	ignoredebris(boolean) : "Ignore Debris" : 0 : "Changes the door's collision group to COLLISION_GROUP_INTERACTIVE, which ignores debris objects. Not compatible with the Non-solid to Player spawnflag as it also sets a collision group."
	input Open(void) : "Opens door."
	input Close(void) : "Closes door."
	input Toggle(void) : "Opens door if closed, closes door if open."
	input Lock(void) : "Prevents door from opening or closing."
	input Unlock(void) : "Allows door to operate as normal."
	input SetSpeed(float) : "Sets Speed."
	input Use(void) : "Simulates a player using the door (acts mostly the same as the other inputs)."
	output OnClose(void) : "Fires when the door starts to close."
	output OnOpen(void) : "Fires when the door starts to open."
	output OnFullyClosed(void) : "Fires when the door finishes closing. Reversed if Start Open flag is set."
	output OnFullyOpen(void) : "Fires when the door finishes opening. Reversed if Start Open flag is set."
	output OnBlockedClosing(void) : "Fires when the door has been blocked from closing. Activator is whatever blocks the door."
	output OnBlockedOpening(void) : "Fires when the door has been blocked from opening. Activator is whatever blocks the door."
	output OnUnblockedClosing(void) : "Fires when the door is no longer blocked from closing."
	output OnUnblockedOpening(void) : "Fires when the door is no longer blocked from opening."
	output OnLockedUse(void) : "Fires when the player tries to open the door but fails because it is locked."
]
//Out of alphabetical order here because the FGD parser is big dummy
@BaseClass base(Model,CBaseAnimating,DamageFilter) = CBreakableProp 
[
	spawnflags(flags) =
	[
		16 : "Break on Touch" : 0
		32 : "Break on Pressure (breaks whenever put under any pressure e.g. being stood on)" : 0
	]
	solid(choices) : "Collisions" : 6 : "Method of collision for this entity." =
	[
		0 : "None"
		2 : "Bounding Box"
		6 : "VPhysics"
	]
	ExplodeDamage(float) : "Explosion Damage" : 0 : "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
	ExplodeRadius(float) : "Explosion Radius" : 0 : "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
	minhealthdmg(integer) : "Min Damage to Hurt" :  : "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage from that hit."
	PerformanceMode(choices) : "Performance Mode" : 0 : "Used to limit the amount of gibs produced when this entity breaks, for performance reasons." =
	[
		0 : "Normal"
		1 : "No Gibs"
		3 : "Reduced gibs"
	]
	PressureDelay(float) : "Pressure Delay" : 0 : "Seconds to delay breaking from pressure if Break on Pressure is checked. Allows creaking/groaning sounds to play."
	physdamagescale(float) : "Physics Impact Damage Scale" : 1 : "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
	input physdamagescale(float) : "Sets Physics Impact Damage Scale."
	input Break(void) : "Breaks the prop."
	input SetHealth(integer) : "Sets a new value for the prop's health. If the prop's health reaches zero it will break. Works even if not using an _override entity."
	input AddHealth(integer) : "Adds health to the prop."
	input RemoveHealth(integer) : "Removes health from the prop."
	output OnBreak(void) : "Fired when this object breaks. !Activator is whatever breaks the object."
	output OnHealthChanged(float) : "Fired whenever the health of the prop has increased or decreased. Automatically puts the new health amount as a decimal percent (e.g. 45% = 0.45) as the input parameter, unless overridden by the mapper."
]
@BaseClass base(CBaseAnimating,DamageFilter) = CBreakablePropNoModelKV 
[
	spawnflags(flags) =
	[
		16 : "Break on Touch" : 0
		32 : "Break on Pressure (breaks whenever put under any pressure e.g. being stood on)" : 0
	]
	ExplodeDamage(float) : "Explosion Damage" : 0 : "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also Explosion Radius."
	ExplodeRadius(float) : "Explosion Radius" : 0 : "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also Explosion Damage."
	minhealthdmg(integer) : "Min Damage to Hurt" :  : "If a single hit to the object doesn't do at least this much damage, the prop won't take any of the damage from that hit."
	PerformanceMode(choices) : "Performance Mode" : 0 : "Used to limit the amount of gibs produced when this entity breaks, for performance reasons." =
	[
		0 : "Normal"
		1 : "No Gibs"
		3 : "Reduced gibs"
	]
	PressureDelay(float) : "Pressure Delay" : 0 : "Seconds to delay breaking from pressure if Break on Pressure is checked. Allows creaking/groaning sounds to play."
	physdamagescale(float) : "Physics Impact Damage Scale" : 1 : "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
	input physdamagescale(float) : "Sets Physics Impact Damage Scale."
	input Break(void) : "Breaks the prop."
	input SetHealth(integer) : "Sets a new value for the prop's health. If the prop's health reaches zero it will break. Works even if not using an _override entity."
	input AddHealth(integer) : "Adds health to the prop."
	input RemoveHealth(integer) : "Removes health from the prop."
	output OnBreak(void) : "Fired when this object breaks. !Activator is whatever breaks the object."
	output OnHealthChanged(float) : "Fired whenever the health of the prop has increased or decreased. Automatically puts the new health amount as a decimal percent (e.g. 45% = 0.45) as the input parameter, unless overridden by the mapper."
]
@BaseClass base(CBaseEntity) = CBaseFilter 
[
	Negated(choices) : "Filter mode" : 0 : "If set to Allow, only entities who match the criteria will pass the filter." =
	[
		0 : "Allow entities that match criteria"
		1 : "Disallow entities that match criteria"
	]
	input TestActivator(void) : "Tests if the !activator of this input meets the criteria, then and fires either OnPass or OnFail. Changing Filter mode will affect which output is fired."
	output OnPass(void) : "Fires when TestActivator is sent and the !activator is allowed by the criteria."
	output OnFail(void) : "Fires when TestActivator is sent and the !activator is not allowed by the criteria."
]
@BaseClass base(CBaseEntity,EnableDisable,Toggle,Origin,Parent) = CBaseTrigger 
[
	spawnflags(flags) =
	[
		1 : "Clients (players) may trigger." : 1
		8 : "Physics Objects may trigger." : 0
		64 : "Everything (not including physics debris) may trigger." : 0
		1024 : "Physics debris may trigger. Debris objects are usually small and not solid to players." : 0
	]
	filtername(filterclass) : "Filter Name" :  : "A filter entity (such as filter_activator_name) to test potential activators against."
	input TouchTest(void) : "For testing if something is currently touching the trigger. Fires either the OnTouching or OnNotTouching output."
	input StartTouch(void) : "Fires the OnStartTouch output."
	input EndTouch(void) : "Fires the OnEndTouch output."
	output OnStartTouch(void) : "Fired when a valid entity starts touching this trigger."
	output OnStartTouchAll(void) : "Fired when a valid entity starts touching this trigger, and no other entities are already touching it. If there are any other entities touching the trigger when a new one begins to touch, only OnStartTouch will fire."
	output OnEndTouch(void) : "Fired when a valid entity stops touching this trigger. WARNING: If the !activator of this output is a player who disconnected, any entity trying to see what the activator was can cause a crash."
	output OnEndTouchAll(void) : "Fired when ALL valid entities stop touching this trigger."
	output OnTouching(void) : "Fired if something is currently touching this trigger when sent TouchTest."
	output OnNotTouching(void) : "Fired if nothing is currently touching this trigger when sent TouchTest."
]
@BaseClass base(CBaseEntity,Parent,RenderAlphaColor) = CBeam 
[
	spawnflags(flags) =
	[
		1 : "Start On" : 1
		2 : "Toggle (Obsolete. Uncheck if checked and use the Toggle input instead.)" : 0
		16 : "StartSparks (temporarily emits a sparks at starting point.)" : 0
		32 : "EndSparks (temporarily emits a sparks at ending point.)" : 0
		64 : "Decal End (scorch mark where a damaging beam hits something. For env_beam see Decal Name.)" : 0
	]
	HDRColorScale(float) : "HDR color scale" : "1.0" : "Value to multiply sprite color by when running in HDR mode."
	damage(integer) : "Damage/second" : 0 : "How much damage this beam does per second to things it hits when it is continually on, or instantaneously if it strikes. For continuous damage, the value should be greater than 10 or it may not work."
	dissolvetype(boolean) : "Sparks on Damage" : 0 : "If this beam damages something, shows sparks on that entity."
	input Width(float) : "Sets the radius of the beam (i.e. 1 = 2 world units total thickness)."
	input Noise(float) : "Sets how far away from the middle that the beam is allowed to deviate."
	input ColorRedValue(integer) : "Sets how red the beam is (0-255). The resulting color will be affected by any color in the base texture, so only hueless textures will be able to show the full color spectrum."
	input ColorGreenValue(integer) : "Sets how green the beam is (0-255)."
	input ColorBlueValue(integer) : "Sets how blue the beam is (0-255)."
]
@BaseClass base(CBaseEntity,VisibleBrush,DamageFilter) = CBreakable 
[
	spawnflags(flags) =
	[
		1 : "Only Break on Trigger (Break input)" : 0
		2 : "Break on Touch" : 0
		4 : "Break on Pressure (when something is on top of this entity)" : 0
		512 : "Break immediately on Physics (any physics damage will break the brush)" : 0
		1024 : "Don't take physics damage" : 0
	]
	propdata(choices) : "Prop Data" : 0 : "Set to the best approximation of the size and material of this entity's brushes. If set, this will override Strength and Material Type and the damage amounts taken from various weapons. Some settings can make the brush unbreakable." =
	[
		0 : "None"
		1 : "Wooden.Tiny"
		2 : "Wooden.Small"
		3 : "Wooden.Medium"
		4 : "Wooden.Large"
		5 : "Wooden.Huge"
		6 : "Metal.Small"
		7 : "Metal.Medium"
		8 : "Metal.Large"
		9 : "Cardboard.Small"
		10 : "Cardboard.Medium"
		11 : "Cardboard.Large"
		12 : "Stone.Small"
		13 : "Stone.Medium"
		14 : "Stone.Large"
		15 : "Stone.Huge"
		16 : "Glass.Small"
		17 : "Plastic.Small"
		18 : "Plastic.Medium"
		19 : "Plastic.Large"
		20 : "Pottery.Small"
		21 : "Pottery.Medium"
		22 : "Pottery.Large"
		23 : "Pottery.Huge"
		24 : "Glass.Window"
	]
	health(integer) : "Strength/Health" : 1 : "How much damage to take before breaking. The brush will not break from damage if this is 0."
	material(choices) : "Material Type" : 0 : "Material type of the brush. Decides what sounds to make when damaged, and what gibs to produce when broken." =
	[
		0 : "Glass"
		1 : "Wood"
		2 : "Metal"
		4 : "Concrete"
		5 : "Ceiling Tile - Tile sound, HL1 plaster gib sound on break, wood gibs"
		6 : "Computer - Metal sounds, spark sound and effect, wood gibs"
		7 : "Unbreakable Glass - Not breakable. Makes cartoon-y bullet sound."
		8 : "Rocks"
		10 : "None - Wood gibs"
	]
	explosion(choices) : "Gibs Direction" : 1 : "Used to decide which direction to throw gibs when broken." =
	[
		0 : "Random"
		1 : "Relative to Attack"
		2 : "Use Precise Gib Dir (see below)"
	]
	gibdir(angle) : "Precise Gib Direction" : "0 0 0" : "An exact direction in which to throw gibs when breaking. Be sure to select Use Precise Gib Dir in Gibs Direction!"
	PerformanceMode(choices) : "Gib Mode" : 0 : "How many gibs to spawn." =
	[
		0 : "All Gibs"
		3 : "Reduced gibs"
		1 : "No Gibs"
	]
	minhealthdmg(integer) : "Min Damage to Hurt" : 1 : "If a single hit to the object doesn't do at least this much damage, the entity won't take any of the damage from that hit."
	PressureDelay(float) : "Pressure Delay" : 0 : "Seconds to delay breaking from pressure if Break on Pressure is checked. Allows creaking/groaning sounds to play."
	physdamagescale(float) : "Physics Impact Damage Scale" : 1 : "Multiplier for damage amount when this entity is hit by a physics object. With a value of 0 the entity will take no damage from physics."
	input SetMass(float) : "If this entity is physically simulated, set its mass."
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for the breakable's health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable."
	input RemoveHealth(integer) : "Removes health from the breakable."
	output OnBreak(void) : "Fired when this object breaks. Activator is whatever breaks the object."
	output OnHealthChanged(float) : "Fired whenever the health of the breakable has increased or decreased. Will fire multiple times at once when shot by shotguns. Automatically puts the new health amount as a decimal percent (e.g. 45% = 0.45) as the input parameter, unless overridden by the mapper."
]
@BaseClass base(CBaseEntity,Parent,EnableDisable) = CEnvSoundscape 
[
	radius(integer) : "Radius" : 128 : "Defines the entity's sphere of influence. -1 means infinite range."
	soundscape(string) : "Soundscape" :  : "The name of the soundscape to play. Some examples are provided, but the entire list is not. Corresponds to an entry in the soundscapes*.txt file in the /scripts/ directory. The best way to browse soundscapes is from within the game with the playsoundscape console command."
	position0(target_destination) : "Sound Position 0" :  : "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
	position1(target_destination) : "Sound Position 1" :  : "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
	position2(target_destination) : "Sound Position 2" :  : "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
	position3(target_destination) : "Sound Position 3" :  : "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
	position4(target_destination) : "Sound Position 4" :  : "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
	position5(target_destination) : "Sound Position 5" :  : "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
	position6(target_destination) : "Sound Position 6" :  : "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
	position7(target_destination) : "Sound Position 7" :  : "Entities which define the location from which any positioned sounds play. Must be entities that the client knows about (e.g info_target or anything visible)."
	input ToggleEnabled(void) : "Toggle the soundscape on/off. When off, the soundscape will never play from this entity."
	output OnPlay(void) : "Fired when this soundscape becomes the active one."
]
@BaseClass base(CBaseEntity,Parent) = CFunc_Dust 
[
	Color(color255) : "Particle Color (R G B)" : "255 232 176" : "Color of the sprites."
	SpawnRate(integer) : "Particles Per Second" : 12 : "Number of particles to spawn, per second."
	SizeMin(float) : "Minimum Particle Size" : 8 : "Minimum size sprites can be."
	SizeMax(float) : "Maximum Particle Size" : 10 : "Maximum size sprites can be."
	SpeedMax(integer) : "Maximum Particle Speed" : 5 : "Maximum speed that the particles can move after spawning."
	LifetimeMin(integer) : "Minimum Particle Lifetime" : 2 : "Minimum number of seconds until each particle dies. Particles live for a random duration between this and Maximum Particle Lifetime."
	LifetimeMax(integer) : "Maximum Particle Lifetime" : 4 : "Maximum number of seconds until each particle dies."
	DistMax(integer) : "Maximum Visible Distance" : 384 : "Maximum distance at which particles are visible. They fade to transparency at this distance."
	FallSpeed(float) : "Fall Speed" : 0 : "Extra downward speed applied to the sprites."
	Alpha(integer) : "Alpha" : 255 : "Translucency of the particles. 0 means that they are invisible, 255 means opaque."
	Frozen(boolean) : "Frozen" : 0 : "Spawns the number of sprites specified in Particles Per Second, then freezes them all in place. The sprites will never go away, except if the entity is Killed."
	StartDisabled(boolean) : "Start Disabled" : 0 : "Stay inactive until sent TurnOn."
	input TurnOn(void) : "Turns the emitter on."
	input TurnOff(void) : "Turns the emitter off."
]
@BaseClass base(CBaseEntity,VisibleBrush,Origin) = CFuncBrush 
[
	Solidity(choices) : "Solidity" : 0 : "Used to control the solidity/collision of these brushes." =
	[
		0 : "Toggle - The solidity can be toggled together with its visibility."
		1 : "Never Solid"
		2 : "Always Solid"
	]
	solidbsp(choices) : "Solid BSP" : 0 : "How the engine processes this entity's solidity. Try changing this to BSP if players move oddly while touching the brush (if it moves)." =
	[
		0 : "VPhysics"
		1 : "BSP (QPhysics)"
	]
	StartDisabled(boolean) : "Start Disabled" : 0 : "Makes the brush start invisible. If Solidity is Toggle, the brush will also be non-solid."
	input Enable(void) : "Makes the entity visible. If Solidity is Toggle, the brush will become solid."
	input Disable(void) : "Makes the entity invisible. If Solidity is Toggle, the brush will become non-solid."
	input Toggle(void) : "If enabled, disables the entity. If disabled, enables the entity."
]
@BaseClass base(CBaseEntity,VisibleBrush,Origin) = CFuncMoveLinear 
[
	spawnflags(flags) =
	[
		8 : "Not Solid (BUG: breaks phys_constraint)" : 0
	]
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the brush will move in."
	startsound(sound) : "Start sound" :  : "Sound played when the brush starts moving."
	stopsound(sound) : "Stop sound" :  : "Sound played when the brush stops moving."
	blockdamage(float) : "Block Damage" : 0 : "How much to damage entities that block the brush per tick."
	startposition(float) : "Start Position" : 0 : "Position of brush when spawned, where 0 is the position shown in Hammer and 1 is the position given when Move Direction is combined with Move Distance. This keyvalue (and the SetPosition input) do not do any bounds checking, so if the brush is told to move to '2', it will move double the Move Distance, though doing so will not fire OnFullyOpen and OnFullyClosed. Also takes negative values."
	movedistance(float) : "Move Distance" : 100 : "The distance from the starting point that the brush should move, in units."
	speed(float) : "Speed" : 100 : "How fast the brush moves."
	input Open(void) : "Moves the brush to the end position."
	input Close(void) : "Moves the brush to the start position."
	input SetPosition(float) : "Moves the brush to a specific position, where 0 is the starting position and 1 is the end position."
	input SetSpeed(float) : "Sets Speed."
	output OnFullyOpen(void) : "Fires when the brush stops at the end position."
	output OnFullyClosed(void) : "Fires when the brush stops at the start position."
]
@BaseClass base(CBaseEntity,Toggle,Origin) = CFuncPortalDetector 
[
	spawnflags(flags) =
	[
		1 : "Start inactive" : 0
	]
	LinkageGroupID(integer) : "Portal pair ID" : 0 : "Which portals to detect. Normally these are 0 for singleplayer, 2 for P-Body, and 3 for ATLAS."
	CheckAllIDs(boolean) : "Check all portals" : 1 : "Ignores Portal pair ID and detects all portals."
	input Activate(void) : "Turns on bumping functionality."
	input Deactivate(void) : "Turns off bumping functionality."
	output OnStartTouchPortal1(void) : "Fires when portal 1 (blue) is placed in the entity."
	output OnStartTouchPortal2(void) : "Fires when portal 2 (orange) is placed in the entity."
	output OnStartTouchLinkedPortal(void) : "Fires when an open portal is placed in the entity, or a closed portal opens while in the entity."
	output OnStartTouchBothLinkedPortals(void) : "Fires when both portals of a pair are placed in the entity."
	output OnStartTouchPortal(void) : "Fires when any portal is placed in the entity."
	output OnEndTouchPortal(void) : "Fires when a portal moves away from the entity."
	output OnEndTouchPortal1(void) : "Fires when portal 1 (blue) moves away from the entity."
	output OnEndTouchPortal2(void) : "Fires when portal 2 (orange) moves away from the entity."
	output OnEndTouchLinkedPortal(void) : "Fires when an open portal is moved away from the entity, or becomes closed. BUG: If the player walks through a trigger_portal_cleanser (thus removing portals) this output does not fire."
	output OnEndTouchBothLinkedPortals(void) : "Fires when both portals of a pair which were touching the entity are moved away from it. BUG: If the player walks through a trigger_portal_cleanser (thus removing portals) this output does not fire."
]
@BaseClass base(CBaseAnimating,Skin) = CHotPotatoCatcher 
[
	output OnHotPotatoCaught(void) : "Fires when a ball is caught or a new one spawned in it."
	output OnHotPotatoReleased(void) : "Fires when a ball is grabbed from the catcher."
]
@BaseClass base(CBreakable,Origin) = CPhysBox 
[
	spawnflags(flags) =
	[
		4096 : "Start Asleep" : 0
		16384 : "Debris - Don't collide with the player or other debris" : 0
		32768 : "Motion Disabled" : 0
		262144 : "Not affected by rotor wash" : 0
		524288 : "Generate output on +USE (OnPlayerUse)" : 1
		8388608 : "Prevent motion enable on player bump" : 0
	]
	massScale(float) : "Mass Scale" : 1 : "A scale multiplier for the object's mass. Use the convar sv_massreport 1 to see the actual mass of the object ingame."
	Damagetype(choices) : "Impact Damage Type" : 0 : "Sets the 'sharpness' of the brush. Sharp objects are far more damaging." =
	[
		0 : "Blunt"
		1 : "Sharp"
	]
	overridescript(string) : "Override Parameters" :  : "A list of physics key/value pairs that are usually in a physics prop .qc file. (https://developer.valvesoftware.com/wiki/Prop_data) Format is 'key,value,key,value,etc'."
	damagetoenablemotion(integer) : "Health Level to Override Motion" :  : "If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion."
	forcetoenablemotion(float) : "Physics Impact Force to Override Motion" :  : "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion."
	health(integer) : "Strength" : 0 : "Number of points of damage to take before breaking. 0 means don't break."
	notsolid(choices) : "Not solid to world" : 0 : "If set, the object will pass through world geometry." =
	[
		0 : "Solid to World"
		1 : "Passes through World"
	]
	ExploitableByPlayer(choices) : "Exploitable by Player" : 0 : "TODO: Does this do anything?" =
	[
		0 : "Default"
		1 : "Explosive"
	]
	input Sleep(void) : "Tells the brush to quit moving. Any physics forces (excluding gravity and water buoyancy) will cause the object to resume moving as usual. Sleeping also occurs automatically when the object has no physics forces to keep it awake, and is no longer moving a noticeable amount."
	input Wake(void) : "If the object was told to sleep, tells it to start moving again."
	input DisableMotion(void) : "Tells the object to stop moving completely. No physics forces will re-enable motion, not even Wake."
	input EnableMotion(void) : "If the object's motion has been disabled entirely, tells it to resume movement as usual. This will also Wake the object, if it is Sleeping."
	input DisableFloating(void) : "If the object would normally float when in water, tells it to not float. There seems to be no way to re-enable floating behavior."
	input BecomeDebris(void) : "Changes the collision to act like debris (does not collide with most objects, ignored by some entities)."
	input Enable(void) : "Makes the object visible and solid (doesn't override Not solid to world)."
	input Disable(void) : "Makes the object invisible and untouchable."
	output OnDamaged(void) : "Fires when this entity is damaged."
	output OnAwakened(void) : "Fires when this entity becomes awake (collision/force is applied)."
	output OnMotionEnabled(void) : "Fires when motion is sent EnableMotion."
	output OnPlayerUse(void) : "Fires when the player tries to +USE the physbox. This output will fire only if the Generate output on +USE spawnflag is set."
]
@BaseClass base(CBreakableProp) = CPhysicsProp 
[
	spawnflags(flags) =
	[
		1 : "Start Asleep - Prop begins with motion disabled, but it may be enabled at any time by a force acting on it, or the Wake input." : 0
		2 : "Don't take damage physics damage. (No damage from physics forces.)" : 0
		4 : "Debris - Prop won't collide with player or other debris. Good for small obstructions and expensive models." : 0
		8 : "Motion Disabled. Use EnableMotion to enable it." : 0
		64 : "Enable motion when grabbed." : 0
		128 : "Not affected by rotor wash." : 0
		256 : "Generate output on +use - Allow OnPlayerUse to fire." : 1
		1024 : "Prevent motion enable on player bump - Motion will not be enabled by the player simply running into the prop." : 0
		4096 : "Debris capable of triggering triggers. Requires 'Debris' to be set." : 0
	]
	massscale(float) : "Mass Scale" : 1 : "Multiplier for the object's mass."
	inertiascale(float) : "Scale Factor For Inertia" : 1 : "Scales how much the prop spins in reaction to forces. Larger numbers make the prop roll around more and take longer to settle."
	Damagetype(choices) : "Impact damage type" : 0 : "Kind of damage done to objects that are hit by this prop." =
	[
		0 : "Blunt"
		1 : "Sharp"
	]
	overridescript(string) : "Override Parameters" :  : "A list of physics keyvalues that are usually embedded in the model (https://developer.valvesoftware.com/wiki/Prop_data). Format is key,value,key,value,..."
	damagetoenablemotion(integer) : "Health Level to Override Motion" :  : "If specified, this object will start with motion disabled. Once its health has dropped below this specified amount, it will enable motion."
	forcetoenablemotion(float) : "Physics Impact Force to Override Motion" :  : "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value will enable motion."
	ExploitableByPlayer(choices) : "Exploitable by Player" : 0 : "TODO: Does this do anything?" =
	[
		0 : "Default"
		1 : "Explosive"
	]
	allowfunnel(boolean) : "Allow Portal Funneling" : 1 : "Whether or not this object should auto-funnel into portals."
	input Sleep(void) : "Tell the prop to quit moving. Any physics forces (excluding gravity and water buoyancy) will cause the object to resume moving as usual. Sleeping also occurs automatically when the object has no physics forces to keep it awake, and is no longer moving a noticeable amount."
	input Wake(void) : "If the object was told to sleep, tell it to start moving again."
	input DisableMotion(void) : "Tell the object to stop moving completely. No physics forces will re-enable motion, not even Wake."
	input EnableMotion(void) : "If the object's motion has been disabled entirely, tell it to resume movement as usual. This will also Wake the object, if it is Sleeping."
	input DisableFloating(void) : "If the object would normally float when in water, tell it to not float. There seems to be no way to re-enable floating behavior."
	output OnAwakened(void) : "Fires when the prop has woken (force was applied to it while asleep, or the Wake input was sent)."
	output OnMotionEnabled(void) : "Fires when motion has been enabled on the prop, either via the Health Level to Override Motion or Physics Impact Force to Override Motion keyvalues, or from the EnableMotion input."
	output OnPlayerUse(void) : "Fires when the player has +used the prop. Requires 'Generate output on +use' to be checked."
	output OnPhysGunPickup(void) : "Fires when the prop is picked up with +use."
	output OnPlayerPickup(void) : "Same as OnPhysGunPickup."
	output OnPhysGunDrop(void) : "Fires when the player has dropped the prop."
	output OnOutOfWorld(void) : "Fires whenever the object is detected to be outside the world. Specifically, it checks if the object is outside of the world's bounding box or if the object is traveling at over 2000 units per second in any cardinal direction."
]
@BaseClass base(CBreakablePropNoModelKV) = CPhysicsPropNoModelKV 
[
	spawnflags(flags) =
	[
		1 : "Start Asleep - Prop begins with motion disabled, but it may be enabled at any time by a force acting on it, or the Wake input." : 0
		2 : "Don't take damage physics damage. (No damage from physics forces.)" : 0
		4 : "Debris - Prop won't collide with player or other debris. Good for small obstructions and expensive models." : 0
		8 : "Motion Disabled. Use EnableMotion to enable it." : 0
		64 : "Enable motion when grabbed." : 0
		128 : "Not affected by rotor wash." : 0
		256 : "Generate output on +use - Allow OnPlayerUse to fire." : 1
		1024 : "Prevent motion enable on player bump - Motion will not be enabled by the player simply running into the prop." : 0
		4096 : "Debris capable of triggering triggers. Requires 'Debris' to be set." : 0
	]
	massscale(float) : "Mass Scale" : 1 : "Multiplier for the object's mass."
	inertiascale(float) : "Scale Factor For Inertia" : 1 : "Scales how much the prop spins in reaction to forces. Larger numbers make the prop roll around more and take longer to settle."
	Damagetype(choices) : "Impact damage type" : 0 : "Kind of damage done to objects that are hit by this prop." =
	[
		0 : "Blunt"
		1 : "Sharp"
	]
	overridescript(string) : "Override Parameters" :  : "A list of physics keyvalues that are usually embedded in the model (https://developer.valvesoftware.com/wiki/Prop_data). Format is key,value,key,value,..."
	damagetoenablemotion(integer) : "Health Level to Override Motion" :  : "If specified, this object will start with motion disabled. Once its health has dropped below this specified amount, it will enable motion."
	forcetoenablemotion(float) : "Physics Impact Force to Override Motion" :  : "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value will enable motion."
	ExploitableByPlayer(choices) : "Exploitable by Player" : 0 : "TODO: Does this do anything?" =
	[
		0 : "Default"
		1 : "Explosive"
	]
	allowfunnel(boolean) : "Allow Portal Funneling" : 1 : "Whether or not this object should auto-funnel into portals."
	input Sleep(void) : "Tell the prop to quit moving. Any physics forces (excluding gravity and water buoyancy) will cause the object to resume moving as usual. Sleeping also occurs automatically when the object has no physics forces to keep it awake, and is no longer moving a noticeable amount."
	input Wake(void) : "If the object was told to sleep, tell it to start moving again."
	input DisableMotion(void) : "Tell the object to stop moving completely. No physics forces will re-enable motion, not even Wake."
	input EnableMotion(void) : "If the object's motion has been disabled entirely, tell it to resume movement as usual. This will also Wake the object, if it is Sleeping."
	input DisableFloating(void) : "If the object would normally float when in water, tell it to not float. There seems to be no way to re-enable floating behavior."
	output OnAwakened(void) : "Fires when the prop has woken (force was applied to it while asleep, or the Wake input was sent)."
	output OnMotionEnabled(void) : "Fires when motion has been enabled on the prop, either via the Health Level to Override Motion or Physics Impact Force to Override Motion keyvalues, or from the EnableMotion input."
	output OnPlayerUse(void) : "Fires when the player has +used the prop. Requires 'Generate output on +use' to be checked."
	output OnPhysGunPickup(void) : "Fires when the prop is picked up with +use."
	output OnPlayerPickup(void) : "Same as OnPhysGunPickup."
	output OnPhysGunDrop(void) : "Fires when the player has dropped the prop."
	output OnOutOfWorld(void) : "Fires whenever the object is detected to be outside the world. Specifically, it checks if the object is outside of the world's bounding box or if the object is traveling at over 2000 units per second in any cardinal direction."
]
@BaseClass base(CBaseButton) = CRotButton 
[
	spawnflags(flags) =
	[
		64 : "X Axis - Makes the entity rotate on its X axis. (Default is Z axis.)" : 0
		128 : "Y Axis - Makes the entity rotate on its Y axis." : 0
	]
	distance(float) : "Distance (deg)" : 90 : "How much the brush should rotate in degrees."
]
@BaseClass base(CBaseEntity,Parent,Angles) = SpawnPoint 
[
	priority(integer) : "Spawn Priority (int)" : 0 : "Determines which spawn points get used first. Smaller numbers are used before larger numbers. Useful for keeping timings consistent concerning when enemy players first see one another. Inconsistent spawn locations can affect where terrorists decide to push, and the counter-terrorists' ability to defend a location, both of which are generally frowned upon. No effect in deathmatch."
	enabled(boolean) : "Enabled by default?" : 1 : "Self-explanatory."
	input SetEnabled(void) : "Sets this spawn point as enabled."
	input SetDisabled(void) : "Sets this spawn point as disabled."
	input ToggleEnabled(void) : "If on, turn off. If off, turn on."
]
@BaseClass base(CBaseEntity,Parent,RenderFields,SystemLevel) = CSprite 
[
	spawnflags(flags) =
	[
		1 : "Start on" : 1
		2 : "Play Once (Only animate once.)" : 0
	]
	model(sprite) : "Sprite Name" : "sprites/glow01.spr" : "The material to draw."
	scale(float) : "Scale" : ".25" : "Scale multiplier of the sprite. Maximum 64."
	framerate(float) : "Framerate" : 10 : "Rate at which the sprite should animate, if at all."
	frame(float) readonly : "frame" : 0 : "If the sprite is animated, the frame it's on. Cannot be set here; can only be changed with AddOutput, and requires Framerate to be above 0 to do so."
	GlowProxySize(float) : "Size of Glow Proxy Geometry" : 2 : "Size of the glow as needed for visibility testing. Any time a sphere of this radius would be visible (even if partially obscured by nearby geometry), the sprite will be rendered. Maximum 64."
	input SetScale(float) : "Sets Scale."
	input HideSprite(void) : "Makes the sprite invisible."
	input ShowSprite(void) : "Makes sprite visible."
	input ToggleSprite(void) : "If visible, hides. If invisible, shows."
	input ColorRedValue(integer) : "Change the intensity of the red channel (0-255)."
	input ColorGreenValue(integer) : "Change the intensity of the green channel (0-255)."
	input ColorBlueValue(integer) : "Change the intensity of the blue channel (0-255)."
]

//SE ENTITIES
@PointClass base(CBaseEntity) iconsprite("editor/ai_relationship") sphere(radius) = ai_relationship : "This changes the relationship between any NPCs in terms of how they react to each other. This can be used to make turrets ignore the player or shoot something else."
[
	subject(target_name_or_class) : "Subject(s)" :  : "The targetname or classname of the NPCs whose disposition will change."
	subjectclass(string) : "Subject Class" :  : "As above, for classnames only."
	target(target_name_or_class) : "Target(s)" :  : "The targetname or classname of the NPCs about whom the subject(s) will change their disposition towards. Use !player for the player."
	targetclass(string) : "Target Class" :  : "As above, for classnames only."
	disposition(choices) : "Disposition" : 3 : "The way the subject(s) should feel about the target(s)." =
	[
		1 : "Hate"
		2 : "Fear"
		3 : "Like"
		4 : "Neutral"
	]
	radius(float) : "Radius for subject" : 0 : "Only NPCs within this distance of the entity will have their dispositions changed."
	rank(integer) : "Disposition Priority" : 100 : "How much the subject(s) should Like/Hate/Fear the target(s). Higher priority = stronger feeling."
	StartActive(boolean) : "Start Active" : 1 : "Apply this relationship as soon as the entity spawns?"
	Reciprocal(boolean) : "Reciprocal" : 0 : "Makes the new disposition apply to the targets as well as the subjects."
	input ApplyRelationship(void) : "Apply relationship changes if not done automatically. This will change all subject entities' relationships toward all target entities. The relationship change is in effect until RevertRelationship is sent. (Do not Kill to revert.) Unpredictable results may occur when an NPC is being targeted by two conflicting ai_relationships."
	input RevertRelationship(void) : "Revert relationship changes. This will return the relationship to what it was at the time the ApplyRelationship input was called (or when this ai_relationship was spawned if Start Active is set)."
	input RevertToDefaultRelationship(void) : "Revert relationship changes to the default relationship as it is in code."
]
@PointClass base(CBaseEntity,Parent,EnableDisable) sphere(ActorTargetProximity) sphere(PlayerActorProximity) sphere(PlayerTargetProximity) color(248 155 0) = ai_script_conditions : "Makes a list of conditions relating to the player, an NPC (actor), and a third entity, that trigger events when the conditions are fulfilled. Conditions include being able to see one another and proximity to objects."
[
	Actor(target_destination) : "Actor" :  : "NPC we should be concerned with."
	ActorInVehicle(choices) : "Actor in Vehicle" : 2 : "Checks if actor is in a vehicle." =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	ActorInPVS(choices) : "Actor in Player's PVS" : 2 : "Checks that the actor is in the player's PVS." =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	ScriptStatus(choices) : "Actor is running a script?" : 2 : "Checks if NPC is currently involved in a scripted sequence." =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	ActorSeePlayer(choices) : "Actor see Player" : 2 : "Does Actor need to have LOS to player?" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	ActorSeeTarget(choices) : "Actor Sees Target" : 2 : "Should the NPC see the target entity?" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	target(target_destination) : "Target" :  : "Optional third entity to include in conditions."
	ActorTargetProximity(float) : "Target distance" : 0 : "The distance the actor must be within from the target. Negative values mean the actor must not be within this distance. 0 means ignore this value."
	PlayerActorProximity(float) : "Player distance (from Actor)" : 0 : "The distance the player must be within from the actor. Negative values mean the player must not be within this distance. 0 means ignore this value."
	PlayerTargetProximity(float) : "Player distance from Target" : 0 : "The distance the player must be within from the Target. Negative values the player must not be within this distance. 0 means ignore this value."
	PlayerActorFOV(float) : "Player FOV for Actor" : 180 : "Specify width of view cone in degrees. Negative values mean the Actor must not be in this view cone."
	PlayerTargetFOV(float) : "Player FOV for Target" : 180 : "Specify width of view cone in degrees. Negative values mean the target must not be in this view cone."
	PlayerActorFOVTrueCone(choices) : "Player FOV to actor is a true view cone" : 1 : "Player's view cone is evaluated as a true cone, not pie slice." =
	[
		0 : "No - Tall pie slice"
		1 : "Yes - True view cone"
	]
	PlayerTargetFOVTrueCone(choices) : "Player FOV to target is a true view cone" : 1 : "Player's view cone is evaluated as a true cone, not pie slice." =
	[
		0 : "No - Tall pie slice"
		1 : "Yes - True view cone"
	]
	PlayerActorLOS(choices) : "Player has LOS to Actor" : 2 : "Checks that the player has a clear line of sight to the Actor." =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	PlayerTargetLOS(choices) : "Player has LOS to Target" : 2 : "Checks that the player has a clear line of sight to the Target." =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	PlayerInVehicle(choices) : "Player in Vehicle" : 2 : "Checks if player is in a vehicle." =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	PlayerBlockingActor(choices) : "Player blocking Actor" : 2 : "Checks that the player is blocking the Actor's path." =
	[
		1 : "No"
		2 : "Yes"
		3 : "Don't care"
	]
	RequiredTime(float) : "Required Time" : 0 : "Duration of time that all the conditions must be true for the entity to consider them fulfilled."
	MinimumState(choices) : "Minimum State" : 1 : "Minimum readiness state of the Actor - if for example alert is set, the conditions will not be met if the NPC is idle." =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]
	MaximumState(choices) : "Maximum State" : 3 : "Maximum readiness state of the Actor - if for example alert is set, the conditions will not be met if the NPC is in combat." =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]
	MinTimeout(float) : "Minimum time out" :  : "Minimum time after the entity is enabled/spawned, before OnConditionsTimeout is fired. 0 means no timing out."
	MaxTimeout(float) : "Maximum time out" :  : "Maximum time after the entity is enabled/spawned, before OnConditionsTimeout is fired. If you don't specify this, conditions will time out at exactly Minimum time out. If you DO specify this, timeout will occur randomly between the minimum and maximum.)"
	output OnConditionsSatisfied(void) : "Fires when all conditions have been satisfied. When this fires, the entity will then disable itself. Send the Enable input to check conditions again."
	output OnConditionsTimeout(void) : "Fires when conditions are taking too long to be satisfied. Time to wait is determined by the Minimum and Maximum time out keyvalues. When this fires, the entity will then disable itself. Send the Enable input to check conditions again."
	output NoValidActors(void) : "Fires if/when there are no matching actors in the map."
]
@PointClass base(CBaseEntity) iconsprite("editor/ambient_generic") sphere() color(0 0 255) = ambient_generic : "Plays a sound, either once or on loop, and either from a location in the world or globally. It can play soundscripts (Game Sounds), raw wav's or mp3's, and scripted sentences from sentences.txt.\n" +
"BUG: As a general note, this entity is very broken! Advanced sound manipulation is best done through soundscripts or by putting effects directly on the sound file.\n" +
"BUG: Parenting does not always work with ambient_generic. Use Source Entity.\n" +
"BUG: Known to ignore inputs sent by ent_fire under some specific circumstances."
[
	spawnflags(flags) =
	[
		1 : "Play everywhere - Audible through the entire map and always the same volume. Broken for soundscripts." : 0
		16 : "Start Silent - Makes the sound not play when the map loads. Sounds should usually start silent unless they are looped." : 1
		32 : "Is NOT Looped - Allows the sound to played rapidly without interrupting itself. Does not make sound loop or not loop. BUGGY!" : 0
	]
	message(sound) : "Sound Name" :  : "Sound to play."
	radius(float) : "Max Audible Distance" : 1250 : "Maximum distance that this distance may be heard. BUG: Impressively, sounds are still slightly audible outside this range."
	SourceEntityName(target_destination) : "Source Entity" :  : "A location that the sound will play at instead of from the ambient_generic. BUG: That entity must exist when this entity is spawned, or else the sound will still play at the ambient_generic. Using AddOutput to change this keyvalue does not work."
	preset(choices) : "Dynamic Presets" : 0 : "Various effect filters that change how sounds sound. Note that these are not DSP effects. Setting this will override many of the settings below." =
	[
		0 : "None"
		1 : "Slow Spin up/down"
		2 : "Spin up/down"
		3 : "Fast Spin up/down"
		4 : "Slow Fade in/out"
		5 : "Fade in/out"
		6 : "Fast Fade in/out"
		7 : "Slow Pulse"
		8 : "Pulse"
		9 : "Fast Pulse"
		10 : "Slow Pitch Oscillator"
		11 : "Pitch Oscillator"
		12 : "Fast Pitch Oscillator"
		13 : "Pitch 1"
		14 : "Pitch 2"
		15 : "Pitch 3"
		16 : "Pitch 4"
		17 : "Pitch 5"
		18 : "Pitch 6"
		19 : "Alternate Pitch Oscillation"
		20 : "Alternate Pitch Oscillation 2"
		21 : "Random Pitch Slow"
		22 : "Random Pitch Fast"
		23 : "Incremental Spinup"
		24 : "Weird Pitch 1"
		25 : "Weird Pitch 2"
		26 : "Weird Pitch 3"
		27 : "Weird Pitch 4"
	]
	pitch(integer) : "Pitch" : 100 : "Pitch of the sound on a range from 0 to 255. Default is 100. Does not work with soundscripts."
	pitchstart(integer) : "Start Pitch" : 100 : "A pitch for the sound to 'spin up' (start) and 'spin down' (end) at. See Spin up/down time. BUG: When this number is set higher than Pitch, only a small blip of the sound will play before the sound stops prematurely."
	spinup(integer) : "Spin up time (0-100)" : 0 : "When the sound begins playing, it will take this long for it to transition from Start Pitch to Pitch."
	downwind(integer) : "Spin down time (0-100)" : 0 : "When the sound is told to quit playing by an input, it will take this long to transition from Pitch to Start Pitch (once over, the sound finishes entirely)."
	health(integer) : "Volume" : 10 : "Volume for this sound to play at by default on a range from 0 (silent) to 10."
	volstart(integer) : "Start Volume" : 0 : "A volume for the sound to fade in from and fade out to. See Fade in/out time in seconds."
	fadeinsecs(integer) : "Fade in time in seconds (0-100)" : 0 : "When the sound begins playing, it will take this long to transition from Start Volume to Volume."
	fadeoutsecs(integer) : "Fade out time in seconds (0-100)" : 0 : "When the sound is told to quit playing by an input, it will take this long to transition from Volume to Start Volume (once over, the sound finishes entirely)."
	lfotype(choices) : "LFO Type" : 0 : "A Low Frequency Oscillation pattern to apply to the sound." =
	[
		0 : "None"
		1 : "Square - Sound abruptly switches between high and low."
		2 : "Triangle - Sound smoothly transitions between high and low."
		3 : "Random - Sound changes unpredictably between high and low."
	]
	lforate(integer) : "LFO rate (0-1000)" : 0 : "Frequency that the oscillation occurs."
	lfomodpitch(integer) : "LFO mod pitch (0-100)" : 0 : "Pitch to modulate down to. BUG: When using this, the sound may temporarily stop if the value is higher than Pitch or if Pitch is not at 100."
	lfomodvol(integer) : "LFO mod vol (0-100)" : 0 : "Volume to modulate down to. BUG: When using this, the sound may temporarily stop if the value is higher than Volume x 10 or if Volume is not at 10."
	cspinup(integer) : "Incremental Spinup Count" : 1 : "If Dynamic Preset is Incremental Spinup, an amount by which to increase the pitch when ToggleSound is sent."
	input Pitch(integer) : "Plays the sound at a particular pitch."
	input PlaySound(void) : "Starts the sound."
	input StopSound(void) : "Stops the sound."
	input ToggleSound(void) : "Starts sound if not playing, and stops sound if playing. If Dynamic Presets is Incremental Spinup, increases the pitch by the amount in Incremental Spinup Count."
	input Volume(float) : "Plays the sound at a particular volume. (To clarify, this does not simply change the active volume of the sound. It stops the sound and makes it begin playing again.)"
	input FadeIn(integer) : "Starts sound with a transition from silence to full volume, lasting a given number of seconds. Seems to only work with very specific setups? Needs to be researched."
	input FadeOut(integer) : "Fades the sound to silence over a specified number of seconds."
]
@PointClass base(CBaseEntity,Parent,RenderColor) studio("models/editor/cone_helper.mdl") color(255 203 11) = beam_spotlight : "Effect meant to simulate a lighthouse light. It rotates and draws a beam and/or halo, depending on the viewer's relative angle. This spotlight is entirely client side, and rotation may be desynchronized between clients."
[
	spawnflags(flags) =
	[
		1 : "Start On" : 1
		4 : "Start with Rotation On" : 1
		8 : "Reverse Direction (Default is counter-clockwise.)" : 0
		32 : "Y axis - Makes the entity rotate on the world's Y axis as opposed to the Z axis as normal." : 0
	]
	maxspeed(float) : "Max Rotation Speed" : 100 : "The maximum rotation speed of the spotlight, in degrees per second."
	spotlightlength(float) : "Spotlight Length" : 500 : "Maximum spotlight length. If the beam hits something before it reaches this distance, it will artificially shrink itself."
	spotlightwidth(float) : "Spotlight Width" : 50 : "Spotlight beam's width."
	input LightOn(void) : "Turns the light on."
	input LightOff(void) : "Turns the light off."
	input Start(void) : "Makes the light start rotating."
	input Stop(void) : "Makes the light stop rotating."
	input Reverse(void) : "Makes the light rotate in the opposite direction."
]
@PointClass base(CBaseEntity,Parent,EnableDisable) sphere(minfalloff) sphere(maxfalloff) iconsprite("editor/color_correction") color(255 203 11) = color_correction : "Loads a color correction lookup table (.raw) and controls its strength. Correction is applied in a sphere surrounding the entity, with a configurable amount of falloff. For more info on color correction, see here: https://developer.valvesoftware.com/wiki/Color_correction"
[
	spawnflags(flags) =
	[
		1 : "Master - For use with fog_volume. If no other CC is active, default to this one (good for outdoors)." : 0
		2 : "Simulate client-side - Needs to be set if using the entity with fog_volume." : 0
	]
	minfalloff(float) : "Lookup Falloff Start Distance" : -1 : "Within this range to the entity, the effect will be at full strength. If this is larger than the End Distance, the effect will apply to the entire map."
	maxfalloff(float) : "Lookup Falloff End Distance" : -1 : "Maximum distance from the entity that the effect is applied. At this distance, the effect is barely apparent but will strengthen to 100% as the viewer approaches the Start Distance."
	maxweight(float) : "Maximum Weight" : 1 : "How strongly this entity should apply the effect. This is a decimal percent, e.g. 0.45 = 45%."
	fadeInDuration(float) : "Lookup Fade In Duration" : 0 : "How long this color correction should take to fade in."
	fadeOutDuration(float) : "Lookup Fade out Duration" : 0 : "How long this color correction should take to fade out."
	filename(string) : "Lookup Table Filename" :  : "Filepath to the .raw being used."
	exclusive(boolean) : "Exclusive" : 0 : "Makes all other color_correction entities be disabled if this one becomes active. This only applies when enabling and disabling correction entities (only one fog_volume can be active at a time, and there's no way to give one priority)."
	input SetFadeInDuration(float) : "Sets Lookup Fade In Duration."
	input SetFadeOutDuration(float) : "Sets Lookup Fade out Duration."
]
@PointClass base(CBaseTrigger) color(255 203 11) = color_correction_volume : "When a player steps into this volume, they will have a color correction effect applied to their screen."
[
	filename(string) : "Lookup Table Filename" :  : "Filepath to the .raw being used. Example: materials/correction/cc_finale4.raw."
	fadeDuration(float) : "Lookup Fade Duration" : 0 : "How long the CC takes to fade in and out."
	maxweight(float) : "Maximum Weight" : 1 : "How strongly this entity should apply the effect. This is a decimal percent, e.g. 0.45 = 45%."
]
@PointClass base(CBaseEntity,Parent,EnableDisable) sphere(minfalloff) sphere(maxfalloff) iconsprite("editor/color_correction") color(255 203 11) = env_ambient_light : "Adds color to darker areas of the screen while not affecting bright areas as much."
[
	minfalloff(float) : "Lookup Falloff Start Distance" : -1 : "Within this range to the entity, the effect will be at full strength. Set to -1 to make the effect apply everywhere on the map."
	maxfalloff(float) : "Lookup Falloff End Distance" : 1 : "Maximum distance from the entity that the effect is applied. At this distance, the effect is barely apparent but will strengthen as the viewer approaches the Start Distance."
	maxweight(float) : "Maximum Weight" : 1 : "How strongly the effect can apply. Minimum 0.0, maximum 1.0."
	fadeInDuration(float) : "Lookup Fade In Duration" : 1 : "When the entity becomes Enabled, how long the effect takes to fade in."
	fadeOutDuration(float) : "Lookup Fade out Duration" : 1 : "When the entity becomes Disabled, how long the effect takes to fade out."
	color(color255) : "Color (R G B)" : "255 255 255" : "Color to apply. This color is applied additively, so 0 0 0 will do nothing. To make the view artificially darker, see env_fade."
	input SetFadeInDuration(float) : "Sets Lookup Fade In Duration."
	input SetFadeOutDuration(float) : "Sets Lookup Fade out Duration."
	input SetColor(color255) : "Sets Color."
]
@PointClass base(CBaseEntity,Parent) color(255 203 11) = env_ar2explosion : "Big, volume-filling cloud of dust."
[
	material(sprite) : "Particle Material" : "particle/particle_noisesphere" : "The material to use for each particle in the explosion."
	input Explode(void) : "Makes the explosion effect."
]
@PointClass base(CBeam,Toggle) size(-4 -4 -4, 4 4 4) line(255 255 255, targetname, LightningStart, targetname, LightningEnd) color(255 203 11) = env_beam : "A beam of energy running between two entities.\nBUG: Parenting might break the entity. Try using logic_measure_movement or env_laser."
[
	spawnflags(flags) =
	[
		4 : "Random Strike (Once the beam has died, it will strike again randomly with a time variance set by Strike again time.)" : 0
		128 : "Shade Start (The beam fades out toward its Start Entity. Overrides Shade End. Does not work on striking beams.)" : 0
		256 : "Shade End (The beam fades out toward its Ending Entity. Is overridden by Shade Start. Does not work on striking beams.)" : 0
		512 : "Taper Out (Makes the beam taper out into a point towards its Ending Entity. Does not work on striking beams.)" : 0
	]
	LightningStart(target_destination) : "Start Entity" :  : "Entity that the beam starts at. If omitted the entity will instead use a random position on any surface within its Radius value. A new random position will be appointed for every strike."
	LightningEnd(target_destination) : "Ending Entity" :  : "Entity that the beam ends at. If omitted the entity will instead use a random position on any surface within its Radius value. A new random position will be appointed for every strike."
	life(float) : "Life" : 0 : "Amount of time before the beam dies. Setting to zero will make the beam stay forever."
	BoltWidth(float) : "Width of beam" : 2 : "Radius of the beam (i.e. 1 = 2 world units total thickness)."
	NoiseAmplitude(float) : "Amount of noise" : 0 : "The amount of noise in the beam. 0 is a perfectly straight beam, and high values are very jagged."
	TextureScroll(integer) : "Texture Scroll Rate" : 35 : "Rate at which the beam texture should scroll along the beam."
	StrikeTime(float) : "Strike again time" : 1 : "Time between random strikes of the beam."
	texture(sprite) : "Sprite Name" : "sprites/laserbeam.spr" : "The material used to draw the beam."
	framestart(integer) : "Starting Frame" : 0 : "The frame to start the beam texture on."
	Radius(float) : "Radius" : 256 : "If the Random Strike spawnflag is set, this radius determines the area within which the endpoints will randomly strike."
	TouchType(choices) : "Touch Type" : 0 : "If the beam is touched by an entity fitting this criteria, the OnTouchedByEntity output will fire." =
	[
		0 : "Not a tripwire (all entities ignored)"
		1 : "Player Only"
		2 : "NPC Only"
		3 : "Player or NPC"
		4 : "Player or NPC or Physprop"
	]
	filtername(filterclass) : "Filter Name" :  : "A CBaseFilter entity used to filter which entities can cause OnTouchedByEntity to fire."
	decalname(string) : "Decal Name" : "Scorch" : "If Damage/Second is set to something, this decal will appear where the beam first touches a solid object."
	targetpoint(vecline) : "Endpoint handle" :  : "If an Ending Entity entity is not specified, use this point as the destination instead. If the beam moves, the destination point will move along with it."
	ClipStyle(choices) : "Beam clipping" : 0 : "Select whether you want the beam to clip against geometry or characters." =
	[
		0 : "Do not clip (default)"
		1 : "Clip to geometry"
		2 : "Clip to everything solid"
	]
	input TurnOn(void) : "Turns the beam on."
	input TurnOff(void) : "Turns the beam off."
	input StrikeOnce(void) : "Makes the beam turn on then turn off again once it dies."
	output OnTouchedByEntity(void) : "Fires if an entity passing the Touch Type and Filter Name criterion touches the beam. !Activator is that entity."
]
@PointClass base(CBaseEntity,Parent) color(195 0 0) = env_blood : "Emits blood."
[
	spawnflags(flags) =
	[
		1 : "Random Direction - Spray Direction changes direction every time." : 0
		4 : "On Player - Appears from !activator. A player must be the !activator otherwise blood comes from 1st player." : 0
		8 : "Spray decals - Places a blood decal when emitting the blood." : 0
		16 : "Cloud" : 0
		32 : "Drops" : 0
		64 : "Gore - Emits an effect similar to Cloud but smaller." : 0
	]
	spraydir(angle) : "Spray Direction" : "0 0 0" : "The direction to apply the decal in, and which way to throw the cloud and drops."
	amount(float) : "Amount of blood" : 40 : "Intensity; affects how far decal can go, size of blood cloud, drops and gore."
	input EmitBlood(void) : "Emits the blood effect."
]
@SolidClass base(CBaseEntity,Parent,Toggle) color(28 146 214) = env_bubbles : "Volume in which to spawn rising bubbles. The number and frequency of bubbles can be adjusted. Use tools/toolsinvisible on this entity!"
[
	spawnflags(flags) =
	[
		1 : "Start Off" : 0
	]
	current(float) : "Speed of Current" : 0 : "Speed at which the water is moving. This will cause the bubbles to move east as they rise, or west if the number is negative."
	density(integer) : "Bubble density" : 0 : "How many bubbles to spawn in a single batch, plus one extra."
	frequency(integer) : "Bubble frequency" : 19 : "Time between spawning batches of bubbles. If 20 or greater, the time is always 2.5 seconds. If less, the time is 2.5 - (0.1 * X)."
	input Activate(void) : "Turns on the bubbles."
	input Deactivate(void) : "Turns off the bubbles."
	input SetCurrent(float) : "Sets Speed of Current."
	input SetDensity(integer) : "Sets Bubble density."
	input SetFrequency(integer) : "Sets Bubble frequency."
]
@PointClass base(CBaseEntity,Parent,Angles) color(255 203 11) = env_citadel_energy_core : "Sprite effect commonly used in HL2 and Portal 1 as a beam endpoint effect."
[
	spawnflags(flags) =
	[
		1 : "No small particles - Does not show particles going in the direction of Pitch Yaw Roll." : 0
		2 : "Start on" : 1
	]
	scale(float) : "Scale" :  : "Scale of the effect."
	input StartCharge(float) : "Starts charging the core over a specified number of seconds."
	input StartDischarge(void) : "Plays the discharging effect."
	input Stop(float) : "Makes particles fade away within a given number of seconds."
]
@PointClass base(CBaseEntity) iconsprite("editor/env_particles") sphere(fademindist) sphere(fademaxdist) color(0 180 0) = env_detail_controller : "It overrides the default fading distances for detail sprites."
[
	fademindist(float) : "Start Fade Dist/Pixels" : 400 : "Distance at which the sprites begin to fade away."
	fademaxdist(float) : "End Fade Dist/Pixels" : 1200 : "Distance at which the sprites are no longer visible (and therefore ignored by the renderer)."
]
@PointClass base(CBaseEntity,Parent) iconsprite("editor/env_particles") color(255 203 11) = env_dustpuff : "Makes dust."
[
	scale(float) : "Scale" : 8 : "Size of the dust puff."
	speed(float) : "Speed" : 16 : "Speed at which the dust particles should move."
	color(color255) : "Dust color" : "128 128 128" : "Color of the dust particles."
	input SpawnDust(void) : "Spawns a dust puff."
]
@PointClass base(CBaseEntity,Parent) iconsprite("editor/env_particles") color(255 203 11) = env_dusttrail : "An entity that continuously spawns dust sprites. Parent it to something in order to make a trail."
[
	color(color255) : "Color" : "127 127 127" : "Dust color."
	opacity(float) : "Opacity" : "0.5" : "How transparent the dust is, on a scale from 0 (invisible) to 1 (fully visible)."
	emittime(float) : "Emitter Lifetime" : 0 : "How long to spread dust before stopping. 0 = never stop. This entity will not remove itself automatically once it stops emitting."
	lifetime(float) : "Particle Lifetime" : 5 : "How long a single dust sprite can stay around for."
	spawnrate(float) : "Spawn Rate" : 10 : "How many dust sprites to spawn per second."
	minspeed(float) : "Minimum Random Speed" : 2 : "Minimum speed dust sprites can move at in a random direction. They will lose speed over their lifetime."
	maxspeed(float) : "Maximum Random Speed" : 4 : "Maximum speed dust sprites can move at in a random direction."
	mindirectedspeed(float) : "Minimum Directed Speed" : 0 : "Minimum speed to apply to dust sprites, in the direction specified by Pitch Yaw Roll."
	maxdirectedspeed(float) : "Maximum Directed Speed" : 0 : "Maximum speed to apply to dust sprites, in the direction specified by Pitch Yaw Roll."
	startsize(float) : "Start size" : 35 : "Size of the dust sprites when they first spawn."
	endsize(float) : "End size" : 55 : "Side of the dust sprites when they get close to de-spawning."
	spawnradius(float) : "Spawn Radius" : 2 : "How far away from the entity the dust sprites can spawn at."
]
@SolidClass base(CBaseEntity,Parent) color(219 30 20) = env_embers : "It spawns fire embers within its volume. No more than 2048 sprites will appear at once. If it goes over this limit, it will temporarily stop spawning. The approximate number of sprites at any given time can be found by multiplying Density by Particle Lifetime. (The final number depends on a few other variables, including the size of the brush.)"
[
	spawnflags(flags) =
	[
		1 : "Start On" : 1
		2 : "Toggle - If left off, only one Use input will ever be accepted." : 0
	]
	density(integer) : "Density" : 50 : "Number of particles spawned each second."
	lifetime(integer) : "Particle Lifetime" : 4 : "Number of seconds each particle lasts for. A certain amount of randomness is added proportional to the time specified here."
	speed(float) : "Particle Speed" : 32 : "Number of units moved by particles each second."
	rendercolor(color255) : "Ember Color" : "255 255 255" : "Color of the sprites."
	input Use(void) : "Turns the entity on or off."
	input Color(color255) : "Sets Ember Color. Already-spawned embers will not change color."
]
@PointClass base(CBaseEntity) = env_entity_dissolver : "Fizzles objects as if they were caught in an emancipation grid. Can kill players instantly. Bug: prop_weighted_cube will not fire its OnFizzled output."
[
	target(target_destination) : "Target to Dissolve" :  : "Targetname of the entity to dissolve."
	dissolvetype(choices) : "Fast Dissolve" : 0 : "Dissolves the object faster." =
	[
		0 : "No"
		3 : "Yes"
	]
	input Dissolve(target_destination) : "Dissolves the Target to Dissolve, or any other entity specified in the parameter."
]
@PointClass base(CBaseEntity) color(255 94 8) = env_entity_igniter : "Catches things on fire. Does not work on players."
[
	target(target_destination) : "Entity to ignite" :  : "Entity or entities to ignite."
	lifetime(float) : "Lifetime in seconds" : 30 : "How long the flames last."
	input Ignite(void) : "Ignites the Entity to ignite."
]
@PointClass base(CBaseEntity,Parent,Angles) color(248 155 0) = env_entity_maker : "It spawns a specified point_template template at the env_entity_maker's origin. It can be set to spawn automatically or through inputs."
[
	spawnflags(flags) =
	[
		1 : "Enable AutoSpawn - Spawn template whenever there's enough room to fit it, and the player is not looking." : 0
		2 : "AutoSpawn: Wait for entity to be destroyed." : 0
		4 : "AutoSpawn: Spawn even if the player is looking." : 0
		8 : "ForceSpawn (input): Spawn only if there's enough room to fit the object." : 0
		16 : "ForceSpawn (input): Spawn only if the player isn't looking." : 0
	]
	EntityTemplate(target_destination) : "Point_template To Spawn" :  : "Name of the point_template to spawn here."
	PostSpawnSpeed(float) : "PostSpawn Movement Speed" : 0 : "All entities spawned will move this many units per second in the direction of PostSpawn Movement Direction."
	PostSpawnDirection(angle) : "PostSpawn Movement Direction" : 0 : "All entities spawned in the template will move in this direction."
	PostSpawnDirectionVariance(float) : "PostSpawn Direction Variance" : "0.15" : "The PostSpawn Movement Direction may vary by this many degrees. This is a radius."
	PostSpawnInheritAngles(boolean) : "PostSpawn Inherit Angles" : 0 : "If Yes, spawned entities will face in the same direction as the env_entity_maker's Parent. (As opposed to the direction of this env_entity_maker itself.)"
	input ForceSpawn(void) : "Spawns an instance of the template at this entity's origin and angles. See the ForceSpawn flags."
	input ForceSpawnAtEntityOrigin(target_destination) : "Spawns an instance of the template at the specified entity's origin and angles."
	output OnEntitySpawned(void) : "Fires when an instance of the entity template has been spawned."
	output OnEntityFailedSpawn(void) : "Fires when the template failed to spawn via ForceSpawn due to it not being able to fit properly or due to the player looking at the entity."
]
@PointClass base(CBaseEntity,Parent) iconsprite("editor/env_explosion") color(255 203 11) sphere(iRadiusOverride) = env_explosion : "It creates an explosion at its origin."
[
	spawnflags(flags) =
	[
		1 : "No Damage" : 0
		2 : "Repeatable - Once the explosion has happened, the entity will not remove itself." : 0
		4 : "No Fireball" : 0
		16 : "No Decal - Black scorch decal left at the explosion center." : 0
		32 : "No Sparks (env_explosion normally makes a spark effect but only when underwater, due to a code typo)." : 0
		64 : "No Sound" : 0
		128 : "Random Orientation - Applies more randomness to the orientations of sprites. Virtually impossible to see the difference." : 0
		256 : "No Fireball Smoke - Fireball smoke only spawns if the fireball itself can too." : 0
		512 : "No Particles" : 0
		2048 : "Don't clamp Min - Allow much smaller fire sprites." : 0
		4096 : "Don't clamp Max - Allow much larger fire sprites." : 0
		8192 : "Damage above surface only - Don't do damage to the player if they are underwater." : 0
		16384 : "Generic damage - Do DMG_GENERIC damage, as opposed to DMG_BLAST." : 0
	]
	iMagnitude(integer) : "Magnitude" : 100 : "The amount of damage done by the explosion."
	iRadiusOverride(integer) : "Radius Override" : 0 : "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude."
	DamageForce(float) : "Damage Force" : 0 : "Overrides push force. BUG: Very obvious disparity between force applied to players and force applied to physics objects."
	input Explode(void) : "Makes the explosion happen. If Repeatable is not ticked, the entity will remove itself shortly after the explosion. If this input is sent very rapidly, the explosion may occur multiple times, or possibly infinitely due to the entity not removing itself fast enough! This delay is probably to avoid errors involved with attributing damage/kills to the explosion. If it becomes a problem, Kill the entity as soon as possible or otherwise prevent the input from sending."
]
@PointClass base(CBaseEntity) iconsprite("editor/env_fade") color(255 203 11) = env_fade : "Makes the screen fade to or from a solid color. Add Duration and Hold Time together for the total time this entity will be in effect."
[
	spawnflags(flags) =
	[
		1 : "Fade From - Screen fades from the specified color instead of to it." : 0
		2 : "Modulate - Uses attenuation blending to achieve the fade. 0 255 0 would mute red/blue, make a nightvision effect." : 0
		4 : "Triggering player only - Only affects the screen of the !activator. (Otherwise, all players.)" : 1
		8 : "Stay Out - Fade remains indefinitely until another fade deactivates it." : 0
	]
	duration(float) : "Duration (seconds)" :  : "The time that it will take to fade the screen in or out."
	holdtime(float) : "Hold Fade (seconds)" :  : "The time to hold the faded in/out state."
	renderamt(integer) : "Fade Alpha" :  : "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque."
	rendercolor(color255) : "Fade Color (R G B)" :  : "Fade color."
	ReverseFadeDuration(float) : "Reverse Fade Duration (seconds)" :  : "The duration of the fade when using FadeReverse."
	input Fade(void) : "Starts the screen fade."
	input Alpha(integer) : "Changes Fade Alpha."
	input Color(color255) : "Changes Fade Color."
	input FadeReverse(void) : "Begins doing the reverse of the current fade."
	output OnBeginFade(void) : "Fired when the fade has begun."
]
@PointClass base(CBaseEntity,Parent,EnableDisable) iconsprite("editor/env_fire") color(255 94 8) = env_fire : "It handles a single flame at its origin. The flame causes heat 'damage' to other env_fire entities around it, and will eventually ignite them, causing the fire to spread. The entity attempts to always place itself directly onto the ground by 'dropping' down. The fire may fall through the world if placed exactly at ground level. Place it a little bit above the ground to fix this."
[
	spawnflags(flags) =
	[
		1 : "Infinite Duration" : 1
		2 : "Smokeless (good FPS boost)" : 0
		4 : "Start Ignited" : 1
		8 : "Ignore external heat" : 0
		16 : "Don't drop (disables the dropping behavior)" : 0
		128 : "Delete when out (entity will remove itself after extinguishing)" : 1
	]
	health(integer) : "Duration" : 30 : "Amount of time the fire will burn."
	firesize(integer) : "Size" : 64 : "Distance in which the fire can spread heat to other fire entities. Also scales the fire and smoke to look smaller or larger."
	fireattack(integer) : "Attack" : 4 : "Amount of time the fire takes to grow to full strength."
	ignitionpoint(float) : "Ignition Point" : 32 : "Amount of heat 'damage' to take before this flame should ignite."
	damagescale(float) : "Damage Scale" : 1 : "Multiplier of the burn damage done by the flame."
	input StartFire(void) : "Start the fire."
	input Extinguish(float) : "Puts out the fire permanently after the number of seconds specified."
	input ExtinguishTemporary(float) : "Puts out the fire temporarily after the number of seconds specified."
	output OnIgnited(void) : "Fires when the fire is first ignited."
	output OnExtinguished(void) : "Fires when the fire is fully extinguished."
]
@PointClass base(CBaseEntity,Parent) iconsprite("editor/env_fire") color(255 94 8) = env_fire_trail : "Fire trail. Parent it to something."
[
]
@PointClass base(CBaseEntity,Parent) sphere(fireradius) color(255 94 8) = env_firesensor : "It detects changes in heat from nearby env_fires (other fire-based things are ignored)."
[
	spawnflags(flags) =
	[
		1 : "Start On" : 1
	]
	fireradius(float) : "Radius" :  : "The radius around this entity in which to detect heat changes."
	heatlevel(float) : "Heat level" :  : "The target heat level to check for."
	heattime(float) : "Time at level" :  : "The amount of time the heat level must spend over the target level before the OnHeatLevelStart output is fired."
	input Enable(void) : "Turns the entity on."
	input Disable(void) : "Turns the entity off."
	output OnHeatLevelStart(void) : "Fires when the heat has been above Heat level for the amount of time defined by Time at level."
	output OnHeatLevelEnd(void) : "Fires when the heat falls below Heat level."
]
@PointClass base(CBaseEntity,Parent) sphere(fireradius) iconsprite("editor/env_fire") color(255 94 8) = env_firesource : "It provides heat to all nearby env_fire entities."
[
	spawnflags(flags) =
	[
		1 : "Start On" : 1
	]
	fireradius(float) : "Radius" :  : "The radius around this entity in which to provide heat."
	firedamage(float) : "Intensity/Damage" :  : "Amount of heat 'damage' to apply to env_fires within the Radius."
	input Enable(void) : "Turns the entity on."
	input Disable(void) : "Turns the entity off."
]
@PointClass base(CBaseEntity) iconsprite("editor/fog_controller") color(255 203 11) sphere(fogstart) sphere(fogend) = env_fog_controller : "Creates fog in the air. Multiple may exist in one map in order to change settings at any time. The 3D Skybox fog levels set by the sky_camera parameters should correspond to your env_fog_controller settings. If there's more than one controller in the map, the one a player listens to can be changed by sending the player entity a SetFogController input."
[
	spawnflags(flags) =
	[
		1 : "Master - When using fog_volume, players see this fog controller when not in any volume" : 0
	]
	fogenable(boolean) : "Fog Enabled" : 1 : "Makes fog start active."
	fogstart(float) : "Fog Start" : 400 : "How far away from the viewer the fog should start."
	fogend(float) : "Fog End" : 9500 : "How far away from the viewer the fog reaches Fog Max Density."
	fogmaxdensity(float) : "Fog Max Density" : 1 : "Maximum density the fog may reach. Expressed as a decimal percent, so for 45% put 0.45."
	farz(integer) : "Far Z Clip Plane" : -1 : "Anything beyond this distance in world units will not be rendered. This should be higher than Fog End. If this is used, Fog Max Density should be set to 1 otherwise far-away areas will look odd."
	fogcolor(color255) : "Primary Fog Color" : "170 204 221" : "Fog Color."
	fogcolor2(color255) : "Secondary Fog Color" : "170 204 221" : "Secondary Fog Color. If Fog Blend is disabled, this color will never appear."
	fogblend(boolean) : "Fog Blend" : 0 : "Enables color blending between Primary Fog Color and Secondary Fog Color. When the viewer looks in the Primary Fog Direction, fog will appear as the Primary color. When looking away from the specified direction, fog appears as the Secondary color. If the camera is not pointed directly at or away from the direction, a blend of the two colors will result."
	fogdir(vecline) : "Primary Fog Direction" : "1 0 0" : "Direction which the viewer camera is checked against to figure out the blend between the primary and secondary fog colors."
	use_angles(boolean) : "Use Angles for Fog Dir" : 0 : "Use Pitch Yaw Roll for the Fog Blend direction instead of Primary Fog Direction."
	foglerptime(float) : "Interpolate time" : 5 : "Fade time for the StartFogTransition input."
	input TurnOn(void) : "Turns the fog on."
	input TurnOff(void) : "Turns the fog off, meaning none appears at all if this is the controller being listened to."
	input SetStartDist(float) : "Sets Fog Start."
	input SetEndDist(float) : "Sets Fog End."
	input SetColor(color255) : "Sets Primary Fog Color."
	input SetColorSecondary(color255) : "Sets Secondary Fog Color."
	input SetFarZ(integer) : "Sets Far Z Clip Plane."
	input SetMaxDensity(float) : "Sets Fog Max Density."
	input SetAngles(string) : "Sets Primary Fog Direction."
	input SetColorLerpTo(color255) : "Stores a value for Primary Fog Color that is set once the StartFogTransition input is sent."
	input SetColorSecondaryLerpTo(color255) : "Stores a value for Secondary Fog Color that is set once the StartFogTransition input is sent."
	input SetStartDistLerpTo(float) : "Stores a value for Fog Start that is set once the StartFogTransition input is sent."
	input SetEndDistLerpTo(float) : "Stores a value for Fog End that is set once the StartFogTransition input is sent."
	input StartFogTransition(void) : "When fired, the fog fades to any new values sent through the 'LerpTo' inputs. Fade time is determined by the Interpolate time keyvalue.\n" +
	"BUG: If not specified by the input associated with them, the lerpto values for the distances and the max density will be zero, so fog will inch closer and closer to the camera while also fading to nothing, then go back to normal once the transition is over."
	input SetMaxDensityLerpTo(float) : "Stores a value for Fog Max Density that is set once the StartFogTransition input is sent."
]
@PointClass base(CBaseEntity,Parent) color(255 203 11) = env_funnel : "Sprite funnel effect. Used in the start of Half-Life. Portal 2 is missing sprites/flare6.vmt, so you'll have to make your own to use this entity."
[
	spawnflags(flags) =
	[
		1 : "Reverse (Makes the sprites move away from the entity, instead of moving towards it.)" : 0
	]
	input Use(void) : "Emits the effect. Once it's done, the entity is automatically removed from the map."
]
@PointClass base(CBaseEntity) color(248 155 0) iconsprite("editor/env_global") = env_global : "Stores boolean info, even across rounds (logic_branch will reset). This also includes across maps."
[
	spawnflags(flags) =
	[
		1 : "Set Initial State - Makes this entity define the global state once the server loads the map." : 1
	]
	globalstate(string) : "Global State to Set" :  : "Global state the entity is associated with. Essentially, the name of a variable."
	initialstate(choices) : "Initial State" :  : "Used by Set Initial State to determine what the global state should be set to when the map starts." =
	[
		0 : "Off"
		1 : "On"
		2 : "Dead (Dead globals get turned off permanently, and can never be put back to Off or On.)"
	]
	input TurnOn(void) : "Sets the global's state to ON."
	input TurnOff(void) : "Sets the global's state to OFF."
	input Toggle(void) : "Switches state of the global between ON and OFF."
	input Remove(void) : "Set state of global to DEAD."
]
@PointClass base(CBaseEntity,Parent,EnableDisable) line(255 255 255, targetname, target) size(16 16 16) color(255 203 11) = env_gunfire : "Purely cosmetic gunfire effect."
[
	target(target_destination) : "Target" :  : "Entity will shoot at this target. Required."
	minburstsize(integer) : "Min Burst Size" : 30 : "Minimum number of shots in a burst of shots."
	maxburstsize(integer) : "Max Burst Size" : 30 : "Maximum number of shots in a burst of shots."
	minburstdelay(float) : "Min Delay Between Bursts" : 1 : "Minimum delay between bursts in seconds."
	maxburstdelay(float) : "Max Delay Between Bursts" : 1 : "Maximum delay between bursts in seconds."
	rateoffire(float) : "Rate of fire" : ".09" : "Number of bullets to fire per second."
	spread(integer) : "Bullet spread" : 1 : "Bullets may deviate this far away in degrees, from shooting straight forward."
	bias(choices) : "Bullet distribution" : 1 : "How to distribute bullets within the spread. Even distribution will shoot bullets nearly uniformly throughout the Bullet spread cone. Biased will avoid the middle and aim more along the outside of the cone." =
	[
		1 : "Evenly distributed"
		-1 : "Biased towards the outside"
	]
	collisions(choices) : "Collision detection" : 1 : "Whether/how to handle bullet collision detection. If you select None, this entity will be very cheap to use, but all bullets will stop short at their target's position in space and there will be no impact effects. Normal collision detection does the same things turrets do when they fire their guns (except harm anything)." =
	[
		0 : "None. Cheap performance."
		1 : "Normal collision detection."
	]
	shootsound(sound) : "Shoot Sound" : "npc\turret\turret_fire_4x_01.wav" : "Gun sound to make."
	tracertype(choices) : "Show Tracer" : "Tracer" : "Should bullets be visible?" =
	[
		"Tracer" : "Yes"
		"ParticleEffect" : "No"
	]
]
@PointClass base(CBaseEntity) = env_hudhint : "It is used to display HUD hints. If there are multiple players, the message will only show to the !activator or the first player on the server."
[
	message(string) : "Hint Text" :  : "This should be match a HUD hint entry in \resource\valve_english.txt or a similar file. Entering raw text can be done but will not allow the message to be translated between user languages."
	input ShowHudHint(void) : "Shows the hint message."
	input HideHudHint(void) : "Hides the hint message."
]
@PointClass base(CBaseEntity) = env_instructor_hint : "It is used to instruct the player to do some things, such as not shoot teammates. Only one hint can be shown at a time."
[
	hint_target(target_destination) : "Target Entity" :  : "The entity to show this hint on top of. The entity used must be one that is replicated on the client, or the hint will never show up. Use info_target to show the hint in empty space or at a specific location on another entity. If not desired, see Positioning."
	hint_timeout(integer) : "Timeout" : 0 : "How long the hint stays. 0 will persist until stopped with EndHint."
	hint_icon_onscreen(choices) : "Onscreen Icon" : "icon_tip" : "The icon to use when the hint is within the player's view." =
	[
		"icon_alert" : "Alert (!)"
		"icon_alert_red" : "Alternate Alert"
		"icon_tip" : "Tip (i)"
		"icon_interact" : "Interact (hand with arrow)"
		"icon_door" : "Door"
		"icon_mouseRight" : "Right Click"
		"icon_mouseLeft" : "Left Click"
		"icon_mouseWheel_up" : "Scroll Up"
		"icon_mouseWheel_down" : "Scroll Down"
		"icon_mouseThree" : "Scroll Wheel (mouse3)"
		"icon_key_generic" : "Blank key"
		"icon_key_wide" : "Space Bar"
		"icon_key_right" : "Left Arrow Key"
		"icon_key_left" : "Right Arrow Key"
		"icon_key_down" : "Up Arrow Key"
		"icon_key_up" : "Down Arrow Key"
		"icon_dpad" : "Controller D-Pad"
		"icon_fire" : "Fire"
		"icon_blank" : "Blank"
	]
	hint_icon_offscreen(choices) : "Offscreen Icon" : "icon_tip" : "The icon to use when the hint is outside the player's view." =
	[
		"icon_alert" : "Alert (!)"
		"icon_alert_red" : "Alternate Alert"
		"icon_tip" : "Tip (i)"
		"icon_interact" : "Interact (hand with arrow)"
		"icon_door" : "Door"
		"icon_mouseRight" : "Right Click"
		"icon_mouseLeft" : "Left Click"
		"icon_mouseWheel_up" : "Scroll Up"
		"icon_mouseWheel_down" : "Scroll Down"
		"icon_mouseThree" : "Scroll Wheel (mouse3)"
		"icon_key_generic" : "Blank key"
		"icon_key_wide" : "Space Bar"
		"icon_key_right" : "Left Arrow Key"
		"icon_key_left" : "Right Arrow Key"
		"icon_key_down" : "Up Arrow Key"
		"icon_key_up" : "Down Arrow Key"
		"icon_dpad" : "Controller D-Pad"
		"icon_fire" : "Fire"
		"icon_blank" : "Blank"
	]
	hint_caption(string) : "Caption" :  : "The text of your hint. 100 character limit. This should match a # string in resource/valve_english.txt or a similar file if possible."
	hint_color(color255) : "Caption Color" : "255 255 255" : "The color of the caption text."
	hint_activator_caption(color255) : "Activator Caption" : "255 255 255" : "The color of the caption text, as seen by the !activator."
	hint_icon_offset(float) : "Icon Height Offset" : 0 : "A height offset from the Target Entity's origin to display the hint."
	hint_range(float) : "Display Range" : 0 : "The visible range of the hint. 0 will show it at any distance."
	hint_pulseoption(choices) : "Size Pulsing" : 0 : "Speed for which the icon should grow and shrink, as a way to nag the player about the object." =
	[
		0 : "No Pulse"
		1 : "Slow Pulse"
		2 : "Fast Pulse"
		3 : "Urgent Pulse"
	]
	hint_alphaoption(choices) : "Alpha Pulsing" : 0 : "Speed for which icon will become more or less transparent." =
	[
		0 : "No Pulse"
		1 : "Slow Pulse"
		2 : "Fast Pulse"
		3 : "Urgent Pulse"
	]
	hint_shakeoption(choices) : "Shaking" : 0 : "How to make the icon shake." =
	[
		0 : "No Shaking"
		1 : "Narrow Shake"
		2 : "Wide Shake"
	]
	hint_static(choices) : "Positioning" : 0 : "Either show at the position of the Target Entity, or show the hint directly on the HUD at a fixed position." =
	[
		0 : "Follow the Target Entity."
		1 : "Show on the HUD."
	]
	hint_nooffscreen(choices) : "Show offscreen" : 0 : "Shows an icon and arrow when the object is off-screen." =
	[
		0 : "Show"
		1 : "Don't show"
	]
	hint_forcecaption(choices) : "Force caption" : 1 : "Do we show the caption text even if the hint is occluded by (hidden behind) a wall?" =
	[
		0 : "No"
		1 : "Show when occluded"
	]
	hint_allow_nodraw_target(choices) : "Allow invisible target" : 1 : "Do we allow the hint to follow entities with nodraw set? TODO: Not referring to EF_NODRAW, so what IS it talking about? Also, why would you want to disallow this when you could consciously make the decision of where the hint points yourself?" =
	[
		0 : "End immediately on nodraw"
		1 : "Yes"
	]
	hint_local_player_only(boolean) : "Only Local Player" : 0 : "Shows the hint only to the first player to join/create the server."
	hint_gamepad_binding(string) : "Gamepad Bound Command" :  : "If using show key bindings setting for the Onscreen Icon or Offscreen Icon, this field should be the command we want to show bindings for, when the user is using a console/non-keyboard controller of some kind. TODO: Example?"
	input ShowHint(target_destination) : "Start showing this hint. If an entity targetname is passed as the parameter, the hint is shown only to that entity."
	input EndHint(void) : "Stop showing the hint if it hasn't already timed out."
]
@PointClass base(CBeam,Toggle) size(-4 -4 -4, 4 4 4) line(255 255 255, targetname, LaserTarget) color(255 203 11) = env_laser : "It creates a laser beam between itself and a given target. The main difference between this entity and env_beam is that a laser will not travel through anything solid. If the laser doesn't cause damage, make sure the origin is not inside anything solid. If your env_laser doesn't have a targetname it will automatically be turned on when the map starts."
[
	BoltWidth(float) : "Width of beam" : 2 : "Radius of the beam (i.e. 1 = 2 world units total thickness)."
	NoiseAmplitude(float) : "Amount of noise" : 0 : "The amount of noise in the beam. 0 is a perfectly straight beam, and high values are very jagged."
	TextureScroll(integer) : "Texture Scroll Rate" : 35 : "Rate at which the beam texture should scroll along the laser."
	texture(sprite) : "Sprite Name" : "sprites/laserbeam.spr" : "The material used to draw the laser. IMPORTANT: Remember to add the texture's file extension to the end, to prevent crashes and other bugs."
	LaserTarget(target_destination) : "Target of Laser" :  : "The laser's endpoint. This is required."
	EndSprite(sprite) : "End Sprite" :  : "If specified, this sprite will be drawn at the end of the laser."
	framestart(integer) : "Starting Frame" : 0 : "The frame to start the laser texture on."
	input TurnOn(void) : "Turns the beam on."
	input TurnOff(void) : "Turns the beam off."
]
@PointClass base(CBaseEntity,Parent,Angles) studio("models/editor/axis_helper_thick.mdl") sphere(MinDist) sphere(MaxDist) sphere(OuterMaxDist) sphere(GlowProxySize) color(160 240 37) = env_lightglow : "It puts an additive glow in the world, mostly used over light sources and other locations where a glow would look natural (tunnels, caves, dark buildings, etc). It's main difference from env_sprite is its ability to appear only when the viewer is in a certain area. This entity does not have Enable/Disable inputs. Using the Color input with a parameter of 0 0 0 will hide it, as a workaround."
[
	spawnflags(flags) =
	[
		1 : "Visible only from front" : 0
	]
	rendercolor(color255) : "Color (R G B)" : "255 255 255" : "Glow color."
	VerticalGlowSize(integer) : "Vertical Size" : 30 : "Height of the sprite."
	HorizontalGlowSize(integer) : "Horizontal Size" : 30 : "Width of the sprite."
	MinDist(integer) : "Minimum Distance" : 500 : "The distance at which this effect will be fully translucent."
	MaxDist(integer) : "Maximum Distance" : 2000 : "The distance at which this effect will be at full intensity."
	OuterMaxDist(integer) : "Outer Maximum Distance" : 0 : "If larger than the maximum distance, the glow will also fade out until this distance past Maximum Distance."
	GlowProxySize(float) : "Glow Proxy Geometry Size (0-64)" : 2 : "Size of the glow to be rendered for visibility testing. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."
	input Color(color255) : "Changes the color of the glow. A value of 0 0 0 will hide the sprite."
]
@PointClass base(CBaseEntity,Parent,EnableDisable) sphere(MaxRange) iconsprite("editor/env_microphone") color(0 0 255) = env_microphone : "It acts as a microphone. In 'Speaker mode', it picks up sound and rebroadcasts it at a Speaker target. It ignores the Hears X spawnflags and does not fire the SoundLevel output. (BUG: Does not pick up weapon fire sounds) In 'Measuring mode', it measures the sound level at a Measure target and outputs the sound level as a value between 0 and 1. It only hears sounds that match the Hears X spawnflags."
[
	spawnflags(flags) =
	[
		1 : "Hears combat sounds" : 1
		2 : "Hears world sounds" : 1
		4 : "Hears player sounds" : 1
		8 : "Hears bullet impacts" : 1
		16 : "Swallows sounds routed through speakers - Original sound is erased" : 1
		32 : "Hears explosions" : 1
		64 : "Ignores non-attenuated sounds - Ignores sounds set to play everywhere in the map" : 0
	]
	SpeakerName(target_destination) : "Speaker target" :  : "Name of an entity at which to play any sounds heard by this microphone. If specified, the microphone will consider itself in 'Speaker mode'."
	target(target_destination) : "Measure target" :  : "If the speaker is not in 'Speaker mode', this is the name of the entity where the sound level is to be measured. If not specified, the env_microphone uses itself as the target."
	ListenFilter(filterclass) : "Listen Filter" :  : "The name of a filter entity which specifies which entities the microphone can hear. Sounds emitted by other entities will be ignored."
	speaker_dsp_preset(choices) : "Speaker DSP Preset" : 0 : "Only useful in Speaker mode. If specified, sounds played back through speakers will be affected by the selected DSP setting. BUG: All active env_microphones are forced to use the same preset at the same time. This is because the entity just sets a ConVar called dsp_speaker which actually controls the preset. DSP will not apply to all sounds. AddOutput is buggy with this keyvalue. It's better to change the dsp_speaker convar directly." =
	[
		0 : "Normal"
		3 : "Metal Reverb"
		4 : "Metal Reverb 2"
		5 : "Metal Reverb 3"
		7 : "Airy Reverb"
		8 : "Airy Reverb 2"
		9 : "Small Reverb"
		10 : "Small Reverb 2"
		11 : "Small Reverb 3"
		12 : "Tunnel Reverb 2"
		13 : "Tunnel Reverb 3"
		14 : "Muffled"
		15 : "Muffled 2"
		16 : "Distant Muffled Echo"
		20 : "Close Echo"
		21 : "Repeating Echo"
		22 : "Repeating Echo 2"
		23 : "Weird Reverb"
		24 : "Repeating Echo 3"
		30 : "Muffled 4"
		31 : "Muffled 5"
		32 : "Muffled 6"
		37 : "Ear Ringing"
		38 : "Radio"
		44 : "Weird"
		45 : "Weird 2"
		46 : "Volume Modulate"
		55 : "Flange/Radio"
	]
	Sensitivity(float) : "Sensitivity (0-10)" : 1 : "Sensitivity in measuring mode. 1 is normal, and anything between there and 10 causes SoundLevel's output to be even closer to 1.0."
	SmoothFactor(float) : "Smoothing (0-1)" : ".1" : "How much to smooth SoundLevel's output over time, so that it increases and decreases more gradually."
	MaxRange(float) : "Maximum hearing range (0=infinite)" : 0 : "Sounds beyond this range won't be heard."
	input SetSpeakerName(target_destination) : "Sets Speaker target."
	output SoundLevel(float) : "Fires in Measuring mode whenever the sound level changes. Automatically puts how loud the environment is (from 0 to 1) as the input parameter, unless overridden by the mapper."
	output OnRoutedSound(void) : "Fires in speaker mode whenever a sound is routed out through the specified Speaker target (if any)."
	output OnHeardSound(void) : "Fires in measure mode whenever this microphone hears any sound it cares about."
]
@PointClass base(CBaseEntity,Parent) color(160 240 37) = env_particlelight : "It can be used to light the smoke particles emitted by env_smokestack entities. It does not light anything else."
[
	Color(color255) : "Color" : "255 0 0" : "Color emitted by this light."
	Intensity(integer) : "Intensity" : 5000 : "How strong the light is."
	Directional(boolean) : "Directional" : 0 : "If Yes, this light will use the bumpmap on the smoke sprites. Each particle system can have one ambient and one directional light."
	PSName(target_destination) : "Particle System Entity" :  : "Set this to the name of the env_smokestack that you want this light to affect."
]
@PointClass base(CBaseEntity,Parent) sphere(inner_radius) iconsprite("editor/env_physexplosion") color(255 0 255) = env_physexplosion : "It applies a force to objects within its radius, anything from a gentle nudge to a big explosion, depending on its magnitude. Does not affect players. The explosion itself is not visible; for visible explosions, use env_explosion. Tip: Use this at a low force on hanging objects like lights to make them sway."
[
	spawnflags(flags) =
	[
		1 : "No Damage (Only force. Players will never be damaged even when this flag is off.)" : 1
		2 : "Push players" : 0
		4 : "Push radially - not as a sphere (Radially meaning as a cylinder. No upward or downward force will be generated.)" : 0
		8 : "Test LOS before pushing (Otherwise, the force will travel through solid things.)" : 1
		16 : "Disorient player if pushed - Jostles view significantly." : 0
	]
	magnitude(string) : "Magnitude" : 100 : "Amount of physics force applied by the explosion. Odd behavior may occur if set below 0 or above 100."
	radius(string) : "Clamp Radius (0 = auto)" : 0 : "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude."
	targetentityname(target_destination) : "Limit to Entity" :  : "If specified, the explosion will only affect the matching entity."
	inner_radius(float) : "Inner radius" : 0 : "If not zero, the LOS is calculated from a point intersecting this sphere. (See the Test LOS flag.)"
	input Explode(void) : "Triggers the explosion."
	input ExplodeAndRemove(void) : "Triggers the explosion, then removes the entity."
	output OnPushedPlayer(void) : "Fires when a player is pushed by the explosion."
]
@PointClass base(CBaseEntity,Parent) line(255 255 255, targetname, directionentityname) iconsprite("editor/env_physexplosion") color(255 0 255) = env_physimpact : "It causes a physics impact on another entity."
[
	spawnflags(flags) =
	[
		1 : "No fall-off (Force does not weaken with distance.)" : 0
		2 : "Infinite Length" : 0
		4 : "Ignore Mass" : 0
		8 : "Ignore Surface Normal When Applying Force - Gives more predictable movement in some circumstances." : 1
	]
	angles(angle) : "Pitch Yaw Roll (Y Z X)" :  : "Direction to send force in."
	magnitude(integer) : "Magnitude" :  : "Strength of the impact."
	distance(integer) : "Distance" :  : "How far to project the impact (if 0, defaults to 256)."
	directionentityname(target_destination) : "Point to Entity" :  : "If set, the direction of the force will always point from the env_physimpact to the specified entity."
	input Impact(void) : "Triggers the impact."
]
@PointClass base(CBaseEntity) color(248 155 0) = env_player_surface_trigger : "It monitors the $surfaceprop of the material of the surface the player is standing on, and fires outputs whenever it changes to/from a specific material."
[
	gamematerial(choices) : "Game Material to Watch" : 0 : "The material to watch for. When the player stands on/off this material, the entity's outputs will be fired. TODO: There must be other values which aren't listed!" =
	[
		0 : "None (player is in the air)"
		67 : "Concrete"
		77 : "Metal"
		68 : "Dirt"
		86 : "Vent"
		71 : "Grate"
		84 : "Tile"
		83 : "Slosh (Surfaceprop must be 'water' or 'slime'. Does not detect actual water.)"
		87 : "Wood"
		80 : "Computer"
		89 : "Glass"
		70 : "Flesh"
		73 : "Clip"
		79 : "Foliage"
		78 : "Sand"
	]
	input Enable(void) : "Makes the entity active."
	input Disable(void) : "Makes the entity inactive."
	output OnSurfaceChangedToTarget(void) : "Fires when the player moves onto the specified surface."
	output OnSurfaceChangedFromTarget(void) : "Fires when the player moves off the specified surface."
]
@PointClass base(CBaseEntity) color(255 203 11) = env_portal_credits : "Shows the credits used at the end of the singleplayer campaign."
[
	input RollPortalOutroCredits(void) : "Shows Portal 2's credit sequence (the portion of the ending sequence immediately after seeing the shed door shut). This does not play the song 'Want You Gone', but shows the lyrics for it both on-screen and in captions. Disconnects player when done."
]
@PointClass base(CBaseAnimating,Reflection,Toggle) color(0 255 0) studio() = env_portal_laser : "Emits a Thermal Discouragement Beam."
[
	model(studio) : "World Model" : "models/props/laser_emitter.mdl" : "A path to a .mdl."
	StartState(boolean) : "Start off?" : 0 : "If Yes, laser emitter is off by default."
	LethalDamage(boolean) : "Deal lethal damage" : 0 : "If lethal, the laser will kill players immediately instead of taking several hits to kill."
	AutoAimEnabled(boolean) : "Should auto aim" : 1 : "Allows the laser to bend itself slightly to reach a prop_laser_catcher or point_laser_target. Does not apply if the beam has gone through a reflector cube."
	NoPlacementHelper(boolean) : "No placement helper" : 0 : "Prevents portals from moving slightly to help the player line them up with this laser."
	skin(choices) : "Skin Type" : 0 : "Appearance of the emitter." =
	[
		0 : "Clean"
		1 : "Rusted"
	]
	input TurnOn(void) : "Turns the laser on."
	input TurnOff(void) : "Turns the laser off."
]
@PointClass base(CBaseEntity,Parent,Angles) size(-2 -2 -2, 2 2 2) frustum(lightfov,nearz,farz,lightcolor,-1) color(160 240 37) = env_projectedtexture : "It projects a texture onto the environment, simulating a realistic spotlight. Only one of these should be be active in the PVS at a time to avoid issues. Does not move correctly when parented."
[
	spawnflags(flags) =
	[
		1 : "Start enabled" : 1
	]
	texturename(material) : "Texture Name" : "effects/flashlight001" : "Texture this entity projects."
	target(target_destination) : "Target" :  : "The entity will rotate to point at this target."
	lightfov(float) : "FOV" : 90 : "The field of view cone/pyramid at which the texture is projected."
	nearz(float) : "NearZ" : 4 : "Objects closer than this will not receive the light from the projection."
	farz(float) : "FarZ" : 800 : "Objects beyond this distance will not receive the light from the projection."
	enableshadows(boolean) : "Enable Shadows" : 1 : "Enables/disables shadows from this projected texture."
	shadowquality(choices) : "Shadow Quality" : 1 : "Quality of shadows." =
	[
		0 : "Low (sharp, pixelated shadows)"
		1 : "High (smooth edged shadows)"
	]
	lightonlytarget(boolean) : "Light Only Target" : 0 : "Limit flashlight effect to only affect the Target entity. Does not change lighting on world geometry."
	lightworld(boolean) : "Light World" : 1 : "Control whether flashlight affects static world geometry."
	lightcolor(color255) : "Light Color" : "255 255 255 200" : "RGB light color. Fourth number is the brightness."
	cameraspace(boolean) : "Camera Space" : 0 : "If the entity has a Target, makes the projected texture rotate relative to the player's camera. If used, set Pitch Yaw Roll to 0 0 0."
	textureframe(integer) : "Texture Frame" : 0 : "If the texture is animated, this is the frame it should begin on."
	colortransitiontime(float) : "Color Transition Time" : 1 : "Amount of time it takes for a color change to occur. Higher numbers cause faster transitions."
	style(choices) : "Appearance" : 0 : "Various Custom Appearance presets." =
	[
		0 : "Normal"
		10 : "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11 : "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
		12 : "Underwater flicker"
	]
	pattern(string) : "Custom Appearance" :  : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where a is total darkness, and z is fully bright. i.e. aaggnnttzz would be a steppy fade in from dark to light."
	defaultstyle(string) : "Default Appearance" :  : "TODO: Unknown."
	input TurnOn(void) : "Turns on the texture."
	input TurnOff(void) : "Turns off the texture."
	input FOV(float) : "Sets FOV."
	input EnableShadows(integer) : "Sets Enable Shadows."
	input SpotlightTexture(string) : "Sets the spotlight texture."
	input Target(target_destination) : "Sets Target."
	input CameraSpace(integer) : "Sets Camera Space."
	input LightOnlyTarget(integer) : "Sets Light Only Target."
	input LightWorld(integer) : "Sets Light World."
	input AlwaysUpdateOn(void) : "Turn on per frame updating (for moving lights)."
	input AlwaysUpdateOff(void) : "Turn off per frame updating (for moving lights)."
	input LightColor(color255) : "Sets Light Color."
	input SetLightStyle(integer) : "Sets an Appearance."
	input SetPattern(string) : "Sets Custom Appearance."
	input SetNearZ(float) : "Sets NearZ."
	input SetFarZ(float) : "Sets FarZ."
]
@PointClass base(CBaseEntity) color(255 203 11) = env_screenoverlay : "It can display and control a set of screen overlays, to be displayed over the player's view. Textures which aren't set up to be used with this entity will appear black. The effect will show to all players at once. Overlays are only visible if r_drawscreenoverlay is set to 1."
[
	OverlayName1(material) : "Overlay Name 1" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime1(float) : "Overlay Duration 1" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName2(material) : "Overlay Name 2" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime2(float) : "Overlay Duration 2" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName3(material) : "Overlay Name 3" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime3(float) : "Overlay Duration 3" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName4(material) : "Overlay Name 4" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime4(float) : "Overlay Duration 4" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName5(material) : "Overlay Name 5" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime5(float) : "Overlay Duration 5" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName6(material) : "Overlay Name 6" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime6(float) : "Overlay Duration 6" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName7(material) : "Overlay Name 7" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime7(float) : "Overlay Duration 7" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName8(material) : "Overlay Name 8" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime8(float) : "Overlay Duration 8" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName9(material) : "Overlay Name 9" :  : "Overlay to display. When this overlay's associated duration is over, the next overlay will display."
	OverlayTime9(float) : "Overlay Duration 9" :  : "Amount of time that the overlay should be displayed for. Once over, the next overlay will be shown. The last overlay on the list will always display indefinitely."
	OverlayName10(material) : "Overlay Name 10" :  : "Overlay to display. This overlay will always display indefinitely."
	input StartOverlays(void) : "Starts displaying the first overlay."
	input StopOverlays(void) : "Stops displaying overlays."
	input SwitchOverlay(integer) : "Switches to displaying a specific overlay. Entering -1 as the value will cause the current overlay to display indefinitely."
]
@PointClass base(CBaseEntity,Parent) iconsprite("editor/env_shake") sphere(radius) color(255 203 11) = env_shake : "It shakes the screens of players. Objects can be jostled as well."
[
	spawnflags(flags) =
	[
		1 : "Global Shake - Ignore radius, entire map shakes." : 0
		4 : "In Air - Shake players even in the air." : 0
		8 : "Physics - Shake physics objects, not just the camera." : 0
		16 : "Ropes - Shake ropes. (Works independently from 'Physics'.)" : 0
		32 : "DON'T shake view (for shaking ropes or physics only)" : 0
		64 : "DON'T Rumble Controller - Do not shake the controller for players using an console-style controller." : 0
	]
	amplitude(float) : "Amplitude (0-16)" : 5 : "How far away from the normal position the camera will wobble. Should be between 0 and 16."
	radius(float) : "Effect Radius" : 500 : "The radius around this entity in which to affect players."
	duration(float) : "Duration (seconds)" : 5 : "The length of time in which to shake the screen."
	frequency(float) : "Frequency" : 15 : "How many times per second to change the direction of the camera wobble. 40 is generally enough; values higher are hardly distinguishable."
	input Amplitude(float) : "Sets Amplitude."
	input Frequency(float) : "Sets Frequency."
	input StartShake(void) : "Start the shake."
	input StopShake(void) : "Stop the shake."
]
@PointClass base(CBaseEntity,Parent,RenderFields) iconsprite("editor/env_shooter") color(255 203 11) = env_shooter : "It shoots gibs."
[
	spawnflags(flags) =
	[
		1 : "Repeatable (Otherwise, entity removes itself after firing.)" : 0
		2 : "On fire - Gibs will be on fire!" : 0
		4 : "Fade out even when in player's view" : 0
	]
	m_iGibs(integer) : "Number of Gibs" : 3 : "Total number of gibs to shoot each time the entity should shoot."
	m_flVelocity(float) : "Gib Velocity" : 300 : "Speed of the fired gibs."
	m_flVariance(float) : "Course Variance" : 3 : "How much variance in the direction gibs are fired."
	m_flGibLife(float) : "Gib Life" : 3 : "Time in seconds for gibs to live. This time will get randomly increased or decreased by up to 5% for each gib."
	Simulation(choices) : "Physics/Simulate" : 1 : "How the gibs will be physically simulated." =
	[
		0 : "Point (very cheap)"
		1 : "Physics"
		2 : "Ragdoll"
	]
	delay(float) : "Delay between shots" : 0 : "Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once."
	gibangles(angle) : "Gib Angles (Pitch Yaw Roll)" : "0 0 0" : "The orientation of the spawned gibs."
	gibanglevelocity(float) : "Max angular velocity" : 0 : "How fast (degrees/sec) the gibs should spin. They will spin on the x and y axes between 10% and 100% of this speed."
	angles(angle) : "Gib Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the gibs will fly."
	nogibshadows(boolean) : "Disable Shadows" : 1 : "Set to disable shadows on gibs."
	shootmodel(studio) : "Model" :  : "Thing to shoot out."
	shootsounds(choices) : "Material Sound" : -1 : "What sounds play when the gibs collide with things." =
	[
		-1 : "None"
		0 : "Glass"
		1 : "Wood"
		2 : "Metal"
		3 : "Flesh"
		4 : "Concrete"
	]
	skin(integer) : "Gib Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter."
	gibgravityscale(float) : "Gib gravity scale" : 1 : "Scale gravity so that gibs fall faster, slower, or not at all. Only applies when Simulate is Point."
	input Shoot(void) : "Shoots the gibs."
]
@PointClass base(CBaseEntity,Parent,Angles,Toggle) color(255 203 11) = env_smokestack : "It spits out a constant stream of smoke. You can place up to two env_particlelights near the smoke stack to add ambient light to its particles."
[
	InitialState(choices) : "Initial State" : 1 : "Initial state of the entity." =
	[
		0 : "Off"
		1 : "On"
	]
	BaseSpread(integer) : "Spread at the base" : 20 : "How far away the smoke particles can spawn from the entity."
	SpreadSpeed(integer) : "Spread Speed" : 15 : "Amount of random spread in the velocity of the smoke particles after they're spawned."
	Speed(integer) : "Speed" : 30 : "The speed at which the smoke particles move after they're spawned."
	StartSize(integer) : "Particle start size" : 20 : "Size of the smoke particles when they're first emitted."
	EndSize(integer) : "Particle end size" : 30 : "Size of the smoke particles at the end of their lives."
	Rate(integer) : "Emission rate" : 20 : "Rate at which to emit smoke particles (i.e. particles to emit per second)."
	JetLength(integer) : "Length of smoke trail" : 180 : "Length of the smokestack. Lifetime of the smoke particles is derived from this and Speed."
	WindAngle(integer) : "Wind X/Y Angle" : 0 : "This specifies the wind direction. It is an angle in the XY plane."
	WindSpeed(integer) : "Wind Speed" : 0 : "The strength of the wind."
	Wind(vector) : "Wind Vector" : "0 0 0" : "Wind direction, not limited to any axis."
	SmokeMaterial(material) : "Particle material" : "particle/SmokeStack.vmt" : "Material of the smoke particles emitted by this entity."
	Twist(integer) : "Twist" : 0 : "The amount, in degrees per second, that the smoke particles twirl around the smoke stack entity."
	Roll(float) : "Roll Speed" : 0 : "How fast sprites rotate around themselves in degrees per second."
	rendercolor(color255) : "Base Color (R G B)" : "255 255 255" : "The color of the particles."
	renderamt(integer) : "Translucency" : 255 : "How much you can see through the particles."
	input TurnOn(void) : "Turn on the smokestack."
	input TurnOff(void) : "Turn off the smokestack."
	input JetLength(integer) : "Sets Length of smoke trail."
	input Rate(integer) : "Sets Emission rate."
	input Speed(integer) : "Sets Speed."
	input SpreadSpeed(integer) : "Sets Spread Speed."
	input Color(color255) : "Sets Base Color."
	input Alpha(integer) : "Sets Translucency."
]
@PointClass base(CBaseEntity,Parent,Angles) iconsprite("editor/env_particles") color(255 203 11) = env_smoketrail : "An entity that continuously spawns sprites. Parent it to something in order to make a trail. The sprites will appear to fade away when the viewer is close to them."
[
	emittime(float) : "Emitter Life Time" : 1000 : "How long to emit sprites before stopping. This entity will not remove itself automatically once it stops emitting."
	lifetime(float) : "Particle Life Time" : 5 : "How long a single sprite can stay around for."
	startcolor(color255) : "Start Color" : "192 192 192" : "Starting color of the emitted sprites. Sprites will fade toward End Color."
	endcolor(color255) : "End Color" : "160 160 160" : "Color sprites will be at the end of their lifetime."
	opacity(float) : "Sprite Opacity" : "0.75" : "How transparent the sprites are, on a scale from 0 (invisible) to 1 (fully visible)."
	spawnrate(float) : "Spawn Rate" : 10 : "How many sprites to spawn per second."
	startsize(float) : "Starting particle size" : 35 : "Starting size of the sprites. Sprites will grow/shrink toward Ending particle size."
	endsize(float) : "Ending particle size" : 55 : "Size the sprites will be at the end of their lifetime."
	minspeed(float) : "Minimum Random Speed" : 2 : "Minimum speed sprites can move at in a random direction. They will lose speed over their lifetime."
	maxspeed(float) : "Maximum Random Speed" : 4 : "Maximum speed sprites can move at in a random direction."
	mindirectedspeed(float) : "Minimum Directed Speed" : 0 : "Minimum speed to apply to sprites, in the direction specified by Pitch Yaw Roll."
	maxdirectedspeed(float) : "Maximum Directed Speed" : 0 : "Maximum speed to apply to sprites, in the direction specified by Pitch Yaw Roll."
	spawnradius(float) : "Spawn radius" : 2 : "How far away from the entity the sprites can spawn at."
]
@PointClass base(CEnvSoundscape) sphere(radius) iconsprite("editor/env_soundscape") line(255 255 255, targetname, position0) line(255 255 255, targetname, position1) line(255 255 255, targetname, position2) line(255 255 255, targetname, position3) line(255 255 255, targetname, position4) line(255 255 255, targetname, position5) line(255 255 255, targetname, position6) line(255 255 255, targetname, position7) color(0 0 255) = env_soundscape : "Makes a player hear a certain soundscape (https://developer.valvesoftware.com/wiki/Soundscape) when they're able to see the entity. If multiple env_soundscapes are visible, the closest wins."
[
]
@PointClass base(CBaseEntity,Parent,EnableDisable) sphere(radius) iconsprite("editor/env_soundscape") color(0 0 255) = env_soundscape_proxy : "It plays a soundscape with settings copied from an env_soundscape, env_soundscape_proxy, or env_soundscape_triggerable. Can't do anything a regular env_soundscape can't; it's solely for convenience."
[
	MainSoundscapeName(target_destination) : "Soundscape Entity" :  : "The soundscape entity to become a copy of."
	radius(integer) : "Radius" : 128 : "Defines the entity's sphere of influence. -1 means infinite range."
]
@PointClass base(CEnvSoundscape) sphere(radius) iconsprite("editor/env_soundscape") line(255 255 255, targetname, position0) line(255 255 255, targetname, position1) line(255 255 255, targetname, position2) line(255 255 255, targetname, position3) line(255 255 255, targetname, position4) line(255 255 255, targetname, position5) line(255 255 255, targetname, position6) line(255 255 255, targetname, position7) color(0 0 255) = env_soundscape_triggerable : "Makes a player hear a certain soundscape when they touch a trigger_soundscape."
[
]
@PointClass base(CBaseEntity,Parent,Angles) iconsprite("editor/env_spark") color(255 248 40) = env_spark : "It is used to create sparks at its origin."
[
	spawnflags(flags) =
	[
		64 : "Start ON" : 1
		128 : "Glow" : 1
		256 : "Silent" : 0
		512 : "Directional" : 0
	]
	MaxDelay(string) : "Max Delay" : 0 : "The longest delay between sparks (in seconds). If this value is changed with AddOutput, the change will only take effect after the entity sparks again."
	Magnitude(choices) : "Magnitude" : 1 : "The amount of the sparks." =
	[
		1 : "Small"
		2 : "Medium"
		5 : "Large"
		8 : "Huge"
	]
	TrailLength(choices) : "Spark Trail Length" : 1 : "Length of the spark trails." =
	[
		1 : "Short"
		2 : "Medium"
		3 : "Long"
	]
	input StartSpark(void) : "Start the spark effect."
	input StopSpark(void) : "Stop the spark effect."
	input ToggleSpark(void) : "Toggle the on/off state of the spark effect."
	input SparkOnce(void) : "Spark once."
	output OnSpark(void) : "Fired when the sparks emit."
]
@PointClass base(CBaseEntity,Parent) color(28 146 214) = env_splash : "It creates a generic splash effect like the one seen when bullets fire into water."
[
	spawnflags(flags) =
	[
		1 : "Automatically find water surface (place entity above water)" : 0
	]
	scale(float) : "Scale of the splash" : 8 : "Scale of the splash."
	input Splash(void) : "Creates the splash effect."
]
@PointClass base(CBaseEntity,Parent,EnableDisable) iconsprite("editor/env_particles") color(220 136 61) = env_sporeexplosion : "Antlion bugbait particle from Half-Life 2."
[
	spawnrate(float) : "Spawn Rate (as percentage)" : 100 : "How dense the spore effect is. This percentage is not bound to 100; even values in the thousands are acceptable."
]
@PointClass base(CSprite) size(-2 -2 -2, 2 2 2) sprite() sphere(GlowProxySize) color(255 203 11) = env_sprite : "Texture which turns to face the viewer. Good for dust and lighting effects."
[
]
@PointClass base(CSprite) size(-2 -2 -2, 2 2 2) sprite() sphere(GlowProxySize) color(255 203 11) = env_sprite_clientside : "A different version of env_sprite which is handled completely by the client system, and not the server. The entity does still take up an edict, for one tick after spawning. If used whenever possible, the amount of data networked to players can get reduced significantly. The downside is that these sprites cannot receive inputs or be parented."
[
]
@PointClass base(CSprite) size(-2 -2 -2, 2 2 2) sprite() sphere(GlowProxySize) color(255 203 11) = env_sprite_oriented : "A sprite forced to stay in one direction. Texture must use a $spriteorientation."
[
]
@PointClass base(CSprite) size(-2 -2 -2, 2 2 2) sprite() color(255 203 11) = env_spritetrail : "Leaves a fading trail behind it. (Parent it to something.)"
[
	lifetime(float) : "Lifetime" : 5 : "How long the beam lasts. Trails with a longer lifetime will draw less precise paths."
	startwidth(float) : "Start Width" : 4 : "The width of the beam at the beginning."
	endwidth(float) : "End Width" : 1 : "The width of the beam segment at the end of its lifetime."
	spritename(string) : "Sprite Name" : "sprites/bluelaser1.vmt" : "The material to draw. The entity will only use the top row of pixels for the trail."
	animate(boolean) : "Animated" : 1 : "TODO: Tells the sprite to animate if it can? Has never been seen working."
]
@PointClass base(CBaseEntity,Parent,Angles,Toggle) studioprop("models/editor/spot_cone.mdl") color(255 203 11) = env_steam : "A jet of steam, or heat wave distortion."
[
	spawnflags(flags) =
	[
		1 : "Emissive - Use color from Color setting instead of grey. Light around entity also affects color in both cases." : 1
	]
	InitialState(choices) : "Initial State" : 1 : "Should the entity start emitting immediately?" =
	[
		0 : "Off"
		1 : "On"
	]
	Type(choices) : "Particle Type" : 0 : "Steam effect type." =
	[
		0 : "Normal"
		1 : "Heat Wave"
	]
	SpreadSpeed(integer) : "Spread Speed" : 15 : "The amount of random spread in the particle direction after they spawn."
	Speed(integer) : "Speed" : 120 : "The default speed at which the particles move after they spawn."
	StartSize(integer) : "Particle start size" : 10 : "The initial size of the particles after they spawn."
	EndSize(integer) : "Particle end size" : 25 : "The size of the particles at the point at which they are removed. Increasing Length of steam jet allows the sprites to grow even bigger."
	Rate(integer) : "Emission rate" : 26 : "The rate of particle emission. i.e. particles per second."
	JetLength(integer) : "Length of steam jet" : 80 : "How far to shoot out particles. The length of the jet determines the lifetime of each particle. BUG: Long jets of steam may suddenly disappear when the entity origin is not in the player's view."
	RollSpeed(float) : "How fast do the particles spin" : 8 : "Particle roll speed."
	rendercolor(color255) : "Color (R G B)" : "255 255 255" : "Steam color, only used if Emissive flag is set."
	renderamt(integer) : "Translucency" : 255 : "How see-through the smoke is."
	input TurnOn(void) : "Turns the steam jet on."
	input TurnOff(void) : "Turns the steam jet off."
	input JetLength(integer) : "Sets Length of steam jet."
	input Speed(integer) : "Sets Speed."
	input SpreadSpeed(integer) : "Sets Spread Speed."
	input Alpha(integer) : "Sets Translucency."
]
@PointClass base(CBaseEntity,Parent,Angles) color(255 248 209) = env_sun : "It places a glowing sun effect in the skybox where it does not parallax, giving the impression that it is nearly infinitely far away. The entity does not contribute any actual lighting; it is merely a visual representation of the Sun. Use light_environment to provide actual sunlight for your map."
[
	material(sprite) : "Material Name" : "sprites/light_glow02_add_noz" : "Texture to show for the sun."
	overlaymaterial(sprite) : "Overlay Material Name" : "sprites/light_glow02_add_noz" : "Texture to show over the sun when the viewer is looking directly towards it."
	size(integer) : "Size" : 16 : "Size of the sun."
	overlaysize(integer) : "Overlay Size" : 16 : "How big the overlay material is. If -1, uses a default value."
	rendercolor(color255) : "Sun Color (R G B)" : "100 80 80" : "Color of the sun. The effect is additive with the sky: a pure yellow sun with a bright blue sky will appear white in-game; change the color to account for this."
	overlaycolor(color255) : "Overlay Color (R G B)" : "255 255 255" : "Color of the sun overlay."
	use_angles(choices) : "Positioning Method" : 0 : "Which settings should be used to determine where the sun is in the sky." =
	[
		0 : "Viewer Entity"
		1 : "Pitch Yaw Roll"
	]
	target(target_destination) : "Viewer Entity" :  : "Name of an entity (sky_camera is a good choice) used to determine where the sun is in the skybox. The resulting sun sprite will be positioned based on a line starting from the Viewer entity towards the env_sun."
	pitch(float) : "Pitch" : "-60" : "This value sets the pitch position of the sun. It overrides the Pitch in Pitch Yaw Roll, even if left at 0, so it needs to be specified. This Pitch is reverse of the normal, so 90 is straight up, while -90 is straight down (directly overhead). BUG: Breaks when pointed straight down."
	glowDistanceScale(float) : "Glow Distance Scale" :  : "Scales the distance used to test for sun glow occlusion. If the player can see any part of the skybox within this range, the overlay will render."
	input TurnOn(void) : "Enable sun rendering."
	input TurnOff(void) : "Disable sun rendering."
	input SetColor(color255) : "Sets Sun Color."
]
@PointClass base(CBaseEntity) color(255 203 11) = env_texturetoggle : "Allows you to change the textures on entities. In order for env_texturetoggle to work properly, the texture must use a VMT material with the ToggleTexture proxy defined and pointing to an animated VTF file with at least two frames."
[
	target(target_destination) : "Target Brush(es)" :  : "Name of the entities. All ToggleTexture materials on all entities (including sprites) matching the targetname will be affected."
	input IncrementTextureIndex(void) : "Increments the texture's current frame by one."
	input SetTextureIndex(integer) : "Sets the texture's frame to the specified number."
]
@PointClass base(CBaseEntity) color(160 240 37) = env_tonemap_controller : "Controls tonemapping. Think of it as a method of controlling how the player's pupils adjust as they look at areas of different brightnesses. Also controls bloom. To see the effects of this, the map must be compiled with HDR (check the HDR box in the compile options, or use -hdr or -both on the VRAD command line) and the player in question must have HDR enabled in their video settings."
[
	input SetAutoExposureMin(float) : "Sets exposure level when looking at bright things. (Darkens environment in response.)"
	input SetAutoExposureMax(float) : "Sets exposure level when looking at dark things. (Brightens environment in response.)"
	input SetBloomScale(float) : "Sets how intense bloom is."
	input SetTonemapRate(float) : "If set to less than 1.0, divides the time it takes to transition between exposure levels by that much."
	input UseDefaultAutoExposure(void) : "If either SetAutoExposureMin or SetAutoExposureMax has been used, sets their values back to their defaults. (Determined by mat_autoexposure_min and mat_autoexposure_max.)"
	input UseDefaultBloomScale(void) : "If SetBloomScale has been used, sets the value back to its default. (Determined by mat_bloomscale.)"
]
@PointClass base(CBaseEntity) color(255 203 11) = env_viewpunch : "Jostles the player's view."
[
	spawnflags(flags) =
	[
		1 : "Punch all players (ignore radius)" : 0
		2 : "Punch players in the air" : 1
	]
	punchangle(angle) : "Punch angles" : "0 0 0" : "The angle to nudge the camera to."
	radius(float) : "Effect Radius" : 300 : "The radius around this entity in which to affect players."
	input ViewPunch(void) : "Performs the view punch."
]
@PointClass base(CBaseEntity,Angles) iconsprite("editor/env_wind") color(255 0 255) = env_wind : "It pushes rope entities around as if wind was blowing on them."
[
	minwind(integer) : "Min normal speed" : 20 : "Minimum speed of the wind while not gusting."
	maxwind(integer) : "Max normal speed" : 50 : "Maximum speed of the wind while not gusting."
	mingust(integer) : "Min gust speed" : 100 : "Minimum speed of wind gusts."
	maxgust(integer) : "Max gust speed" : 250 : "Maximum speed of wind gusts."
	mingustdelay(integer) : "Min gust delay" : 10 : "Minimum time delay between random gusts."
	maxgustdelay(integer) : "Max gust delay" : 20 : "Maximum time delay between random gusts."
	gustduration(integer) : "Gust Duration" : 5 : "How long will the wind gust for."
	gustdirchange(integer) : "Max gust dir change (degrees)" : 20 : "Maximum amount that the wind's direction changes due to a gust."
	output OnGustStart(void) : "Fired when a wind gust begins."
	output OnGustEnd(void) : "Fired when a wind gust ends."
]
@PointClass base(CBaseEntity) color(255 203 11) = env_zoom : "It can be used to control the player's FOV. Useful for scenes where the player's view is being controlled, or player-usable binoculars/telescopes, etc."
[
	spawnflags(flags) =
	[
		1 : "Allow Normal Zoom" : 0
	]
	FOV(integer) : "Target FOV" :  : "FOV that this entity should set the player's FOV to when active."
	Rate(float) : "Seconds to reach target" :  : "Amount of time it should take to zoom to the specified FOV."
	input Zoom(void) : "Start controlling the player's FOV."
	input UnZoom(void) : "Stop controlling the player's FOV."
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_class") color(248 155 0) = filter_activator_class : "Filter that checks the classname of the activator."
[
	filterclass(string) : "Filter Classname" :  : "The classname to filter by."
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_name") color(248 155 0) = filter_activator_context : "Filter that checks a response context of the activator."
[
	ResponseContext(string) : "Filter Context" :  : "The context to filter by."
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_class") color(248 155 0) = filter_activator_mass_greater : "Filter that checks an entity's mass. TIP: Check the masses of objects ingame with sv_massreport."
[
	filtermass(float) : "Filter Mass" :  : "The mass to filter by. Set Filter mode to Disallow if you want to check masses lower than this number."
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_class") color(248 155 0) = filter_activator_model : "Filter that checks the model of an entity."
[
	model(studio) : "Filter Model" :  : "The model to filter by."
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_name") color(248 155 0) = filter_activator_name : "Filter that checks the targetname of an entity."
[
	filtername(target_destination) : "Filter Name" :  : "The name to filter by. TIP: Entities without any targetname can be filtered by leaving this keyvalue blank."
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_team") color(248 155 0) = filter_activator_team : "Filter that checks which coop bot a player is."
[
	filterteam(choices) : "Filter Team Number" : 0 : "The team number to filter by." =
	[
		0 : "No one"
		2 : "P-Body"
		3 : "ATLAS"
	]
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_multi") color(248 155 0) = filter_damage_type : "Filter that checks the type of damage inflicted."
[
	damagetype(choices) : "Damage type" : 0 : "The damage type to filter by." =
	[
		0 : "Generic"
		1 : "Crushed between two objects (not crushers)"
		2 : "Bullet"
		8 : "Burn (fire and lasers)"
		64 : "Blast"
		512 : "Sonic"
		16384 : "Drown"
	]
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_multi") color(248 155 0) = filter_multi : "A filter that combines other filters."
[
	FilterType(choices) : "Logic Type" : 0 : "Boolean logic applied when testing the filters." =
	[
		0 : "AND (all filters must pass for this filter to pass)"
		1 : "OR (any filter passing is enough for this filter to pass)"
	]
	Filter01(filterclass) : "Filter 1" :  : "Filter to test."
	Filter02(filterclass) : "Filter 2" :  : "Filter to test."
	Filter03(filterclass) : "Filter 3" :  : "Filter to test."
	Filter04(filterclass) : "Filter 4" :  : "Filter to test."
	Filter05(filterclass) : "Filter 5" :  : "Filter to test."
	Filter06(filterclass) : "Filter 6" :  : "Filter to test."
	Filter07(filterclass) : "Filter 7" :  : "Filter to test."
	Filter08(filterclass) : "Filter 8" :  : "Filter to test."
	Filter09(filterclass) : "Filter 9" :  : "Filter to test."
	Filter10(filterclass) : "Filter 10" :  : "Filter to test."
	Negated(boolean) : "Negate Outcome" : 0 : "Whether to negate the result of the sub-filters, after combining them using the Logic Type chosen. Negating the outcome using the AND logic type means that any sub-filter must fail for this filter to pass. Negating the outcome using the OR logic type means that all sub-filters must fail for this filter to pass."
]
@FilterClass base(CBaseFilter) iconsprite("editor/filter_class") color(248 155 0) = filter_player_held : "Filter that only accepts objects being held by a player."
[
]
@SolidClass base(CBaseEntity,EnableDisable) = fog_volume : "It controls fog and other visual cinematic elements within its volume. Typically when Valve uses this entity, they have a master version of their FX entities (use the Master flag) which is used for the outdoors effects, then only create fog_volumes for indoors areas. The entity uses its bounding box to detect players, meaning the trigger will always be in a cuboid shape regardless of how the brush(es) look."
[
	FogName(target_destination) : "Fog Name" :  : "The name of the env_fog_controller to activate when this entity is touched."
	PostProcessName(target_destination) : "Postprocess Name" :  : "The name of the postprocess_controller to activate when this entity is touched."
	ColorCorrectionName(target_destination) : "ColorCorrection Name" :  : "The name of the color_correction to activate when this entity is touched."
]
@SolidClass base(CBaseEntity) color(0 248 219) = func_areaportal : "It creates an areaportal. (https://developer.valvesoftware.com/wiki/Areaportal) When the portal is open, it de-renders objects in the area across from the viewer which aren't visible through the opening. When the portal is closed it cannot be seen through at all. The entity's brush must be textured with tools/toolsareaportal for it to function. Areaportals should completely cover the entrance they're meant to work on. Areaportals must not be able to draw a line through visleaves from one side of themselves to another. If there are multiple openings to an area, there needs to be an areaportal over each one, otherwise the engine cannot define the boundaries between areas. If an areaportal can draw a line to itself, it's considered a leak and generates a pointfile just like a normal one."
[
	target(target_destination) : "Name of Linked Door" :  : "Optional. A prop_door_rotating or func_door whose open/closed state controls the on/off state of the portal."
	StartOpen(choices) : "Initial State" : 1 : "Initial state of the portal." =
	[
		0 : "Closed"
		1 : "Open"
	]
	PortalVersion(integer) readonly : "Portal Version" : 1 : "Differentiates between shipping HL2 maps and maps using new engine features. Changing this could cause odd behavior."
	input Open(void) : "Sets the portal to the open state."
	input Close(void) : "Sets the portal to the closed state."
	input Toggle(void) : "Opens the portal if closed. Closes the portal if open."
]
@SolidClass base(CBaseEntity) color(0 248 219) sphere(FadeStartDist) sphere(FadeDist) = func_areaportalwindow : "An areaportal which closes automatically when far away from the viewing player."
[
	target(target_destination) : "Rendered Window" :  : "The brush entity that fills the gap left by the portal when closed. This entity's textures should not have transparency in its textures."
	FadeStartDist(integer) : "Fade Start Distance" : 128 : "Distance that the fade into the Rendered Window brush entity begins. The further back the player views, the more visible the brush entity will be."
	FadeDist(integer) : "Fade End Distance" : 512 : "Distance at which the Rendered Window is fully visible, and the portal closes."
	TranslucencyLimit(float) : "Translucency limit" : "0.2" : "Keeps the Rendered Window at least this visible at all times. Useful if your rendered window uses an opaque glass material. 1.0 means always fully visible."
	BackgroundBModel(target_destination) : "Foreground bmodel" :  : "Optional brush entity that is drawn when the portal is open. This can simulate effects like moisture on windows."
	input SetFadeStartDistance(integer) : "Sets Fade Start Distance."
	input SetFadeEndDistance(integer) : "Sets Fade End Distance."
]
@SolidClass base(CBreakable,Origin) color(0 255 0) = func_breakable : "A brush that can take damage and break."
[
	spawnflags(flags) =
	[
		2048 : "Don't allow bullet penetration - When a bullet hits a glass side, it passes through if <16 units thick unless you set this." : 0
	]
]
@SolidClass quadbounds() base(CBreakable) color(127 255 255) = func_breakable_surf : "A surface that can be broken bit by bit. All faces except one should use the nodraw texture. The face that will be broken must be textured with glass/glasswindowbreak070a or glass/urban_glass_3 and be rectangular."
[
	spawnflags(flags) =
	[
		1 : "Physics damage decals - If a physics object weakly damages the entity, it will leave an impact mark." : 0
		2 : "Take damage from held objects" : 1
	]
	fragility(integer) : "Fragility" : 100 : "How fragile the glass pieces are after the surface has been broken."
	input Shatter(string) : "Shatters the window. Takes 3 numbers. The first two are the X and Y coords of the impact (as values from 0 to 1). The third is the radius of the shatter, in hammer units."
]
@SolidClass base(CFuncBrush) = func_brush : "A general-purpose utility brush which can do many things."
[
]
@SolidClass base(CBaseButton) = func_button : "A button which can be pressed with the use key (E)."
[
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "Specifies the direction of motion to move when the button is used. Once the entity has moved so far that it's not occupying its original space anymore, it will stop moving."
	lip(integer) : "Lip" : 0 : "The amount, in units, of the button to leave inside its original space when pressed. Negative values make the button move even farther. By default, the button will move in Move Direction until it no longer occupies the space it was originally in."
]
@SolidClass base(CBaseEntity,Parent) color(216 5 136) color(255 0 255) = func_clip_vphysics : "It's a brush which is only solid to physics objects, like props and weapons. Hull-simulated objects (i.e. players, hostages, nades) can pass through."
[
	filtername(filterclass) : "Filter Name" :  : "Filter to use to see if activator collides with this entity."
	input Enable(void) : "Makes the entity active."
	input Disable(void) : "Makes the entity inactive."
]
@SolidClass base(CBaseEntity) color(255 203 11) = func_detail_blocker : "Disallows detail sprites from being placed inside its volume."
[
]
@SolidClass base(CBaseDoor) color(0 255 0) = func_door : "A simple sliding door. Moves until it's no longer in the space it originally occupied."
[
	movedir(angle) : "Move Direction" : "-90 0 0" : "The direction in which the door will move when it opens. It will open far enough that it does not occupy the space it spawned in."
	lip(integer) : "Lip" : 0 : "The amount, in units, of the door to leave inside its original space when pressed. Negative values make the door move even farther. By default, the door will move in Move Direction until it no longer occupies the space it was originally in."
]
@SolidClass base(CBaseDoor) color(0 255 0) = func_door_rotating : "Rotating brush that can be 'opened' by players or NPCs. It rotates around its origin on the Z axis by default. The axis can be changed via spawnflags."
[
	spawnflags(flags) =
	[
		2 : "Reverse Dir - This door opens in the opposite direction." : 0
		16 : "One-way - Forces door to only open one way." : 0
		64 : "X Axis - This door rotates on the X axis." : 0
		128 : "Y Axis - This door rotates on the Y axis." : 0
	]
	solidbsp(choices) : "Solid BSP" : 0 : "How the engine processes this entity's solidity. Try changing this to BSP if players move oddly while touching the brush." =
	[
		0 : "VPhysics"
		1 : "BSP (QPhysics)"
	]
]
@SolidClass base(CFunc_Dust) color(255 203 11) = func_dustcloud : "Spawns randomly-sized dust particles within its volume. Unlike func_dustmotes, the size of sprites created by this entity will appear to scale realistically depending on how far away the viewer is."
[
]
@SolidClass base(CFunc_Dust) color(255 203 11) = func_dustmotes : "Spawns randomly-sized dust particles within its volume. Unlike func_dustcloud, the size of sprites created by this entity will always take up the same amount of screen space, no matter how far away the viewer is."
[
]
@PointClass base(CBaseEntity,Parent) sphere(max_range) studio() color(255 203 11) = func_fish_pool : "An area fish can swim in. Fish may react by panicking when they hear danger, or die if harmed."
[
	model(studio) : "World model" : "models/props/de_inferno/goldfish.mdl" : "Model that the fish will appear as."
	fish_count(integer) : "Fish Count" : 4 : "Number of fish in the pool."
	max_range(float) : "Max Range" : 255 : "How far away fish can travel from the entity. Maximum is 255 units."
]
@SolidClass base(CBaseEntity,VisibleBrush,Origin) = func_guntarget : "It's a breakable brush that can move along path_tracks."
[
	speed(float) : "Speed (units per second)" : 100 : "How fast the entity moves, in units per second."
	target(target_destination) : "First stop target" :  : "Name of the first path_track in the path this entity should take."
	health(integer) : "Damage to Take" : 1 : "How much health the entity has."
	input Start(void) : "Makes the brush start moving."
	input Stop(void) : "Makes the brush stop moving."
	input Toggle(void) : "Switches brush between moving and not moving."
	output OnDeath(void) : "Fires when the entity is broken. !activator is the damage inflictor."
]
@PointClass iconsprite("editor/func_instance_parms") = func_instance_io_proxy : "This entity relays inputs in and out of an instance. See here for full usage notes https://developer.valvesoftware.com/wiki/Func_instance_io_proxy"
[
	targetname(target_source) : "Name" : "ioproxy" : "The name that other entities refer to this entity by. TIP: avoid naming an entity the same thing as any classname to avoid issues with code that tries searching by targetname *and* classname."
	input ProxyRelay(string) : "Use to make an output be accessible to mappers while working outside of the instance. TODO: Does the parameter do anything..?"
	output OnProxyRelay(void) : "Use to forward inputs to entities inside the instance."
]
@SolidClass base(CFuncBrush) color(255 203 11) = func_monitor : "It displays a real-time scene captured from a point_camera somewhere else in the world. For the entity to work, the surface(s) on which the camera view will be displayed must have a material with $basetexture _rt_Camera. Stock materials that work are dev\dev_combinemonitor* and dev\dev_tvmonitor*. Players are not rendered if they aren't visible to the viewing player after accounting for PVS, viewcone, and occlusion checks. Visual artifacts may appear if the camera can see a func_monitor."
[
	target(target_destination) : "Camera name" :  : "The point_camera to render."
	input SetCamera(target_destination) : "Changes Camera name."
]
@SolidClass base(CFuncMoveLinear) = func_movelinear : "Can be told to move an arbitrary distance in a set direction. There are bugs that may arise when parenting this entity to another func_movelinear or func_water_analog. A func_door can be used as a workaround."
[
]
@SolidClass base(CBaseEntity,Toggle,Origin) color(0 255 0) = func_noportal_volume : "Prevents portals from intersecting with it. When a portal gun shoots on a surface in this volume, it acts as if that surface is unportalable, just like any metal surface would be. A portal gun can fire portals out of this entity while inside it. BUG: This entity uses its bounding box (yellow box in Hammer) for its 'collisions' against portals. Concave volumes need to be multiple entities."
[
	spawnflags(flags) =
	[
		1 : "Start inactive" : 0
	]
	input Activate(void) : "Turns on blocking functionality."
	input Deactivate(void) : "Turns off blocking functionality."
]
@SolidClass base(CBaseEntity,Toggle) color(29 59 109) = func_occluder : "Hides models behind it. Use carefully! Occluders start to drain performance when the cost of checking each model for LOS outweighs the benefit of not rendering the occluded polys."
[
	StartActive(choices) : "Initial State" : 1 : "How the occluder starts off. Use inputs to activate it." =
	[
		0 : "Inactive"
		1 : "Active"
	]
	input Activate(void) : "Makes the occluder active. (De-render models obscured by it.)"
	input Deactivate(void) : "Makes the occluder inactive."
]
@SolidClass base(CPhysBox) color(255 0 255) = func_physbox : "A brush that's free to move around like a prop_physics."
[
]
@SolidClass base(CPhysBox) color(255 0 255) = func_physbox_multiplayer : "A version of func_physbox that works better when in multiplayer maps. It has optimizations which make it easier to network than func_physbox, though it can appear to move differently."
[
]
@SolidClass base(CBaseEntity,Toggle,Origin) color(0 255 0) = func_portal_bumper : "It moves portals that touch it so that they don't touch it. Not needed if there's an angle separating the surfaces (i.e. the corners of a room). The entity should stick out at least two units from surfaces it touches."
[
	spawnflags(flags) =
	[
		1 : "Start inactive" : 0
	]
	input Activate(void) : "Turns on bumping functionality."
	input Deactivate(void) : "Turns off bumping functionality."
]
@SolidClass base(CFuncPortalDetector) color(248 155 0) = func_portal_detector : "Detects portals inside a volume. Only included in this FGD for clarity purposes. Use func_portalled instead, as it has the same functionality with more features."
[
]
@SolidClass base(CBaseEntity,Origin,EnableDisable) color(0 255 0) = func_portal_orientation : "Adjusts the rotation of a portal to match a specified angle. BUG: Only reorients portals when first enabled, making the entity inconvenient to use. info_placement_helper is a good alternative. Also, portals placed on a slanted surface will always have their bottom facing downward."
[
	AnglesToFace(angle) : "Angles to face" : "0 0 0" : "Direction the portal should point it's bottom (bright end) in."
	MatchLinkedAngles(boolean) : "Match linked angles" : 0 : "If set, portals placed in this volume will have their angles match their linked portals. This only works for floor or ceiling portals with a currently linked partner."
]
@SolidClass base(CFuncPortalDetector) color(248 155 0) = func_portalled : "Detects when portals are placed inside it, and when players go through those portals."
[
	FireOnPlayer(boolean) readonly : "Player" : 1 : "Fires outputs when a player crosses through the portals. Players are the only crossing objects this entity detects, so there's no reason for this to ever be false."
	FireOnDeparture(boolean) : "Fire On Departure" : 1 : "Fires outputs when leaving the volume through a portal or when going through a set of portals which are both inside the volume."
	FireOnArrival(boolean) : "Fire On Arrival" : 1 : "Fires outputs when entering the volume through a portal or when going through a set of portals which are both inside the volume."
	output OnEntityPrePortalled(void) : "Fires when a player crosses through a portal."
	output OnEntityPostPortalled(void) : "Fires when a player crosses through a portal. (Same as OnEntityPrePortalled.)"
]
@SolidClass base(CRotButton) = func_rot_button : "Rotates to an activated position when pressed."
[
]
@SolidClass base(CBaseEntity,VisibleBrush,Origin) = func_rotating : "Rotates indefinitely."
[
	spawnflags(flags) =
	[
		1 : "Start on - Rotates immediately after spawning." : 0
		2 : "Reverse Direction - Rotates in opposite direction." : 0
		4 : "X Axis - Brush will spin on the X Axis. (Default axis is Z)" : 0
		8 : "Y Axis - Brush will spin on the Y Axis." : 0
		16 : "Acc/Dcc - Accelerates and decelerates when stopping and starting. See Friction." : 0
		32 : "Fan Pain - If something touches the brush, it will be hurt by an amount equal to the current rotation speed divided by 10." : 0
		64 : "Not solid" : 0
		128 : "Small Sound Radius - Sets Rotating sound WAV's radius to small. (Default radius is large)" : 0
		256 : "Medium Sound Radius - Sets Rotating sound WAV's radius to medium." : 0
	]
	maxspeed(float) : "Max Rotation Speed" : 100 : "How fast the brush can rotate in degrees per second."
	message(sound) : "Rotating sound WAV" :  : "Sound to play while rotating."
	fanfriction(float) : "Friction (1 - 100%)" : 1 : "If Acc/Dcc is checked, this number will determine how fast the brush accelerates and decelerates. Higher = faster."
	volume(float) : "Volume (10 = loudest)" : 10 : "Volume of Rotating sound WAV."
	dmg(integer) : "Blocking Damage" : 10 : "How much to damage an entity which blocks this brush from rotating. BUG: This variable may be affected by the code run by Fan Pain."
	solidbsp(choices) : "Solid Type" : 0 : "How the engine processes this entity's solidity. Try changing this to BSP if players move oddly while touching the brush." =
	[
		0 : "VPhysics"
		1 : "BSP (QPhysics)"
	]
	input SetSpeed(float) : "Sets the target speed of the brush. 0.0 means stop, 1.0 means go at Max Rotation Speed, and 0.5 would mean go at half max speed. Negative values are allowed."
	input Start(void) : "Makes the brush start rotating."
	input Stop(void) : "Makes the brush stop rotating."
	input Toggle(void) : "If rotating, stop. If stopped, start rotating."
	input Reverse(void) : "Reverses the rotation direction."
	input StartForward(void) : "Makes the brush rotate in the non-reversed direction."
	input StartBackward(void) : "Makes the brush rotate in the reversed direction."
	input StopAtStartPos(void) : "Tells the brush to quit rotating once it rotates back to its original orientation."
	input GetSpeed(void) : "Fires OnGetSpeed."
	output OnGetSpeed(float) : "Fires when the GetSpeed input is sent. Automatically puts the brush's current speed as the input parameter, unless overridden by the mapper."
]
@SolidClass base(CBaseEntity,Parent) color(255 203 11) = func_smokevolume : "It spawns sprites within its volume. Commonly used for large, localized areas of fog. Func_smokevolumes should not intersect with func_precipitations, as it can freeze the game."
[
	spawnflags(flags) =
	[
		1 : "Blend Colors" : 1
	]
	Color1(color255) : "Particle Color1 (R G B)" : "78 86 82" : "Color 1. If Blend Colors is checked, sprites can be blends between these two colors. If not, they will either be one or the other."
	Color2(color255) : "Particle Color2 (R G B)" : "70 70 70" : "Color 2. If Blend Colors is checked, sprites can be blends between these two colors. If not, they will either be one or the other."
	material(material) : "Material" : "particle/particle_smokegrenade" : "What the sprites will appear as."
	ParticleDrawWidth(float) : "Particle Draw Width" : 80 : "Size of the sprites."
	ParticleSpacingDistance(float) : "Particle Spacing Distance" : 50 : "The distance between the particles inside the volume. The lower the number, the denser the particles, and the more overdraw (drawing a pixel multiple times) there will be."
	DensityRampSpeed(float) : "Density Ramp Speed" : 15 : "How quickly the Density changes."
	RotationSpeed(float) : "Rotation Speed" : 6 : "The speed that the particles should rotate, in degrees per second."
	MovementSpeed(float) : "Movement Speed" : 10 : "The speed that the particles should move around, in units per second."
	Density(float) : "Density" : 1 : "Sprite transparency. Ranges from 0.0 (fully invisible, does not render at all) to 1.0."
	MaxDrawDistance(float) : "Max Draw Distance" : 0 : "How far away the player can be from any part of the brush while still rendering the sprites. 0 means any distance."
	input SetRotationSpeed(float) : "Sets Rotation Speed."
	input SetMovementSpeed(float) : "Sets Movement Speed."
	input SetDensity(float) : "Sets Density."
]
@SolidClass base(CBaseEntity,VisibleBrush,Origin,Parent) = func_tank : "An entity that can turn to face a point in space when told to by info_player_ping_detector. This entity is used for Mounted guns in other games, however the shooting functionality is mostly broken in Portal 2."
[
	spawnflags(flags) =
	[
		32768 : "Non-solid" : 1
	]
	pitchrange(float) : "Pitch range" : 180 : "Degree range the gun can tilt up and down in."
	pitchrate(float) : "Pitch rate" : 600 : "How fast the gun can move up and down."
	yawrange(float) : "Yaw range" : 360 : "Degree range the gun can swivel left or right in."
	yawrate(float) : "Yaw rate" : 600 : "How fast the gun can move left and right."
]
@SolidClass base(CBaseEntity,VisibleBrush,Origin) = func_tracktrain : "An entity that moves along a path defined by path_track entities.\n" +
	"IMPORTANT: Unless the Fixed Orientation flag is set, build your train so that the front of the train is facing down the X axis. (This means that the front of the train is visible in the front view, top is seen from the top view, etc.) When it spawns it will automatically rotate to face the first path_track on the path.\n" +
	"BUG: The Reverse and StartBackward inputs may not function correctly if the New Train Speed keyvalue in the involved path_track entities is set to 0. The train may fail to reverse, and be jammed in place or move in the wrong direction. To solve this issue, some or all of the path_tracks must have their New Train Speed keyvalue set to a non-zero value.\n" +
	"BUG: If trains do not have the same parent as the track nodes they follow, the game may crash."
[
	spawnflags(flags) =
	[
		1 : "No Pitch (X-rot) - Makes the entity's pitch never change as it moves." : 0
		8 : "Not solid" : 0
		16 : "Fixed Orientation - Makes the brush stay in the orientation it was created in." : 0
		128 : "HL1 Train - Alternate collision code. Try setting this if players move oddly while touching the brush." : 0
		256 : "Use max speed for pitch shifting move sound (See Max pitch)." : 0
		512 : "Don't hurt blockers" : 0
		1024 : "Allow Roll (Z-rot) - Allows for the roll to change freely." : 0
	]
	wheels(float) : "Distance Between the Wheels" : 24 : "Used for turning and stopping. Increase the value for smoother turns."
	height(float) : "Height above track" : 0 : "How high above the path_tracks the train will stay."
	startspeed(float) : "Max Speed (units / second)" : 100 : "The maximum speed that this train can move. Any speeds applied to this train, such as by path_tracks or SetSpeed inputs, will be clamped to this maximum value."
	speed(float) : "Initial Speed (units / second)" : 0 : "How much speed the train will move with the moment it spawns."
	bank(float) : "Bank Angle on Turns" : 0 : "Alters the entity's roll by this much when it moves near path_tracks."
	dmg(integer) : "Damage on Crush" : 1 : "The amount of damage this train does to entities that block it, per tick (damage occurs very quickly). Requires that 'Don't hurt blockers' is not checked."
	MoveSound(sound) : "Move Sound" :  : "A sound that is played (and looped) while the train is moving."
	MovePingSound(sound) : "Move Ping Sound" :  : "A sound that is played more frequently as the train speeds up."
	StartSound(sound) : "Start Sound" :  : "A sound played when the train starts moving."
	StopSound(sound) : "Stop Sound" :  : "A sound played when the train stops moving."
	volume(float) : "Volume" :  : "How loudly (from 1 to 10) sounds will play."
	MoveSoundMinPitch(integer) : "Min pitch" : 100 : "The pitch of Move Sound as the train comes to a stop. This value is between 1 and 255, with 100 being the sound's normal pitch."
	MoveSoundMaxPitch(integer) : "Max pitch" : 100 : "The pitch of Move Sound once the train's speed reaches 1000 units per second (or Max Speed, if 'Use max speed for pitch shifting move sound' was checked)."
	MoveSoundMinTime(float) : "Min move sound interval" : 1 : "Minimum interval between playing the Move Ping Sound."
	MoveSoundMaxTime(float) : "Max move sound interval" : 1 : "Maximum interval between playing the Move Ping Sound."
	velocitytype(choices) : "Change Velocity" : 0 : "The method through which this train changes its velocity as it moves along the path." =
	[
		0 : "Instant"
		1 : "Linear blend"
		2 : "Ease in/ease out"
	]
	orientationtype(choices) : "Change angles" : 3 : "The method through which this train changes its orientation as it moves along the path." =
	[
		0 : "Never (fixed orientation)"
		1 : "Near path_tracks (BUG: makes train always face direction of motion)"
		2 : "Linear blend"
		3 : "Ease in/ease out"
	]
	ManualSpeedChanges(choices) : "Manual Train Speed" : 0 : "TODO: What is this???" =
	[
		0 : "Off"
		1 : "On"
	]
	ManualAccelSpeed(float) : "Manual Accel Speed" : 3 : "How fast the entity accelerates."
	ManualDecelSpeed(float) : "Manual Decel Speed" : 3 : "How fast the entity decelerates."
	input Stop(void) : "Stops the train."
	input StartForward(void) : "Makes the train move forward (if it can)."
	input StartBackward(void) : "Makes the train move backward (if it can)."
	input Toggle(void) : "If stopped, start moving. If moving, stop."
	input Resume(void) : "Resumes the train moving in the current direction after it was stopped via the Stop or Toggle input."
	input Reverse(void) : "Reverses the direction of the train."
	input SetSpeed(float) : "Sets the speed of the train, as a portion of Max Speed (0.0 to 1.0)."
	input SetSpeedDir(float) : "Sets the speed of the train, as a portion of Max Speed (0.0 to 1.0). This input accepts negative values, allowing for direction reversal."
	input SetSpeedReal(float) : "Sets the speed in units per second. Must be a positive number between 0.0 and Max Speed."
	input SetSpeedDirAccel(float) : "Sets the speed of the train, as a portion of Max Speed. The train will accelerate or decelerate to that speed, as opposed to instantly changing. Negative values up to -1.0 are allowed and will reverse the train."
	input SetMaxSpeed(float) : "Sets Max Speed."
	input MoveToPathNode(target_destination) : "Tells the entity to move to a specific path_track if it's somewhere in the train's path."
	input TeleportToPathNode(target_destination) : "Tells the entity to teleport to a specific path_track. Unlike with MoveToPathNode, this path_track can be part of a different path."
	input LockOrientation(void) : "Forces the train to stay at its current angles."
	input UnlockOrientation(void) : "Lets the train rotate as normal."
	output OnStart(void) : "Fires when the train starts moving."
	output OnNextPoint(void) : "Fires rapidly and continuously as the train moves. Activator is the path_track being traveled to."
	output OnArrivedAtDestinationNode(void) : "Fires when the train arrives at a node which was specified by MoveToPathNode."
]
@SolidClass base(CBaseEntity,VisibleBrush,Origin,Toggle) = func_train : "Moves along a set of path_tracks. It was replaced with func_tracktrain in Half-Life, but this entity is still useful because it doesn't suffer some of that entity's bugs."
[
	spawnflags(flags) =
	[
		8 : "Not Solid" : 0
	]
	target(target_destination) : "Target Track" :  : "Name of a path_track to move towards. The brush will teleport to this entity upon spawning. If changed with AddOutput, it will move towards that entity instead, but the effect will only take place once the entity reaches its current target or is sent the Stop input, sent AddOutput, then Started again."
	dmg(integer) : "Blocking Damage" : -1 : "How much damage to do to players that block the brush. Set to -1 to not do any damage."
	speed(float) : "Speed" : 100 : "How many units per second to move."
	noise1(sound) : "Start/Movement Sound" :  : "The sound to play when the brush moves."
	noise2(sound) : "Stop Sound" :  : "The sound to play when the brush stops moving."
	volume(integer) : "Sound Volume" : 1 : "How loud the sounds are from 0.0 (quietest) to 1.0 (loudest)."
	input Start(void) : "Makes the entity start moving."
	input Stop(void) : "Makes the entity stop moving."
]
@SolidClass base(CFuncMoveLinear) = func_water_analog : "Can be used to make a water brush move. MUST use cheap water! There are bugs that may arise when parenting this entity to a func_movelinear or func_water_analog. A func_door can be used as a workaround."
[
]
@SolidClass base(CBaseEntity,VisibleBrush,Origin) color(255 0 255) = func_weight_button : "It's a brush which fires outputs depending on how much weight is pressing on it. Weapons and other items being carried by players, and hostages, are considered weightless. BUG: Players will not be weighed correctly, and their effective weight on the button can change unpredictably as they move."
[
	WeightToActivate(float) : "Weight to Activate" :  : "Amount of weight (kg) needed to fire outputs. TIP: Use sv_massreport 1 to see the weights of objects ingame."
	output OnPressed(void) : "Fires when enough weight is on the button."
	output OnReleased(void) : "Fires when the button was pressed, but now weight has been removed."
]
@PointClass base(CBaseEntity) studio("models/editor/axis_helper_thick.mdl") = futbol_catcher : "Catches and holds prop_glass_futbols."
[
	output OnFutbolCaught(void) : "Fires when a futbol is caught."
	output OnFutbolReleased(void) : "Fires when a futbol is taken from the holder."
]
@PointClass base(CBaseEntity) iconsprite("editor/game_text") color(255 203 11) = game_text : "It displays text on players' screens."
[
	spawnflags(flags) =
	[
		1 : "All Players - Makes text show to the whole server, otherwise only to the !activator." : 0
	]
	message(string) : "Message Text" :  : "Message to display onscreen. TIP: strings from text files in cstrike/resource/ (such as #Valve_Move_Forward) will be translated for all users to the language they're running the game on."
	x(float) : "X (0 - 1.0 = left to right) (-1 centers)" : -1 : "Horizontal position of the text. 0.0 = far left, 1.0 = far right, -1 = perfectly centered."
	y(float) : "Y (0 - 1.0 = top to bottom) (-1 centers)" : -1 : "Vertical position of the text. 0.0 = top, 1.0 = bottom, -1 = perfectly centered. Portal 2 used .32 for chapter titles and .35 for chapter subtitles."
	effect(choices) : "Text Effect" : 2 : "How the text appears and disappears." =
	[
		0 : "Fade In/Out - The whole text fades in and fades out."
		2 : "Scan Out - Puts each letter in one by one and gives the letters an alternative color if they were just put in."
	]
	color(color255) : "Color1" : "210 210 210" : "The primary color used by all text effects. Note: Bright backgrounds or dark text colors can result in the text being nearly invisible."
	color2(color255) : "Color2" : "50 90 116" : "The color a letter will be when it's first put on the screen when using Scan Out."
	channel(choices) : "Text Channel" : 0 : "The game can have up to 6 game_texts active at once, but every text message must use a different channel otherwise the previous message on that channel will be erased. Portal 2 uses 2 for chapter titles and 3 for chapter subtitles." =
	[
		0 : "Channel 0 - Small Bold"
		1 : "Channel 1 - Small Bold"
		2 : "Channel 2 - Small"
		3 : "Channel 3 - Large Bold"
		4 : "Channel 4 - Small Bold"
		5 : "Channel 5 - Small Bold"
	]
	fadein(float) : "Fade in Time (or character scan time)" : ".06" : "If Text Effect is Fade In/Out, this is how long the text takes to fade in. If it's Scan Out, this is how long each letter will take to pop in."
	holdtime(float) : "Hold Time" : 5 : "Once all the text is fully on-screen, how long to keep it there before fading away."
	fadeout(float) : "Fade Out Time" : ".5" : "How long it takes for text to fade out after Hold Time is over."
	fxtime(float) : "Scan time (scan effect only)" : ".5" : "If Text Effect is Scan Out, this is how long it will take a newly-created letter to fade from Color2 to Color1. This fade time is not taken into account by Hold Time. Hold time begins the moment the last letter pops on the screen."
	input Display(void) : "Shows the text to the !activator, or to everyone if All Players is checked."
	input SetText(string) : "Sets Message Text."
	input SetPosX(float) : "Sets X."
	input SetPosY(float) : "Sets X."
	input SetTextColor(float) : "Sets Color1."
	input SetTextColor2(float) : "Sets Color2."
]
@PointClass base(CBaseEntity) color(248 155 0) = game_ui : "It monitors a player's game input (such as walking and looking around) and puts it into outputs. One game_ui is needed for every player that needs to be monitored at once. The player is the activator of all outputs."
[
	spawnflags(flags) =
	[
		32 : "Freeze Player - Sets the player's walking speed to 0 while the entity is active." : 1
		64 : "Hide Weapon - Makes the player's weapon be hidden. BUG: player goes to reference pose." : 0
		128 : "+Use Deactivates - Stops monitoring the player if they press E." : 1
		256 : "Jump Deactivates - Stops monitoring the player if they jump." : 1
	]
	FieldOfView(float) : "Field Of View" : -1 : "If the entity is active, how far away the player can look from it while not deactivating it. -1 = any direction, 0 = 90 degrees, 1 = looking perfectly at it. The angle will still be checked even through solid walls."
	input Activate(target_destination) : "Starts monitoring input. If the parameter is specified, it monitors a player with that targetname. Otherwise, the entity monitors the !activator."
	input Deactivate(void) : "Stops monitoring the player input."
	output PlayerOn(void) : "Fires when Activate is sent."
	output PlayerOff(void) : "Fires when Deactivate is sent or when the player looks outside of Field Of View."
	output PressedMoveLeft(void) : "Fires when the player sends +moveleft (walk left)."
	output UnpressedMoveLeft(void) : "Fires when the player sends -moveleft"
	output PressedMoveRight(void) : "Fires when the player sends +moveright (walk right)."
	output UnpressedMoveRight(void) : "Fires when the player sends -moveright."
	output PressedForward(void) : "Fires when the player sends +forward (walk forward)."
	output UnpressedForward(void) : "Fires when the player sends -forward."
	output PressedBack(void) : "Fires when the player sends +back (walk backward)."
	output UnpressedBack(void) : "Fires when the player sends -back."
	output PressedAttack(void) : "Fires when the player sends +attack (primary attack)."
	output UnpressedAttack(void) : "Fires when the player sends -attack."
	output PressedAttack2(void) : "Fires when the player sends +attack2 (secondary attack)."
	output UnpressedAttack2(void) : "Fires when the player sends -attack2."
]
@PointClass base(CBaseAnimating,Skin,Model) sphere(fademindist) sphere(fademaxdist) = generic_actor : "An entity used for playing voicelines. Used for voices such as Glados."
[
]
@PointClass base(CBaseEntity) = hammer_updateignorelist : "Entities with targetnames matching the ones specified here will not have their VMF position updated when using the hammer_update_safe_entities console command. Several of these can exist in a map."
[
	IgnoredName01(target_destination) : "Ignored Name 01" :  : "Targetname of an entity to ignore."
	IgnoredName02(target_destination) : "Ignored Name 02" :  : "Targetname of an entity to ignore."
	IgnoredName03(target_destination) : "Ignored Name 03" :  : "Targetname of an entity to ignore."
	IgnoredName04(target_destination) : "Ignored Name 04" :  : "Targetname of an entity to ignore."
	IgnoredName05(target_destination) : "Ignored Name 05" :  : "Targetname of an entity to ignore."
	IgnoredName06(target_destination) : "Ignored Name 06" :  : "Targetname of an entity to ignore."
	IgnoredName07(target_destination) : "Ignored Name 07" :  : "Targetname of an entity to ignore."
	IgnoredName08(target_destination) : "Ignored Name 08" :  : "Targetname of an entity to ignore."
	IgnoredName09(target_destination) : "Ignored Name 09" :  : "Targetname of an entity to ignore."
	IgnoredName10(target_destination) : "Ignored Name 10" :  : "Targetname of an entity to ignore."
	IgnoredName11(target_destination) : "Ignored Name 11" :  : "Targetname of an entity to ignore."
	IgnoredName12(target_destination) : "Ignored Name 12" :  : "Targetname of an entity to ignore."
	IgnoredName13(target_destination) : "Ignored Name 13" :  : "Targetname of an entity to ignore."
	IgnoredName14(target_destination) : "Ignored Name 14" :  : "Targetname of an entity to ignore."
	IgnoredName15(target_destination) : "Ignored Name 15" :  : "Targetname of an entity to ignore."
	IgnoredName16(target_destination) : "Ignored Name 16" :  : "Targetname of an entity to ignore."
]
@PointClass base(CPhysicsPropNoModelKV,Skin) studio("models/props/futbol.mdl") color(0 255 0) = hot_potato : "Ball that can explode on contact with other objects."
[
	ExplodeOnTouch(boolean) : "Explode on Touch" : 1 : "Ball will explode when it touches something solid."
	ShouldRespawn(boolean) : "Should Respawn" : 1 : "If the ball explodes, it will respawn at a hot_potato_spawner if this is set to Yes."
	SpawnerName(target_destination) : "Spawner Name" :  : "If the ball should respawn, the name of a hot_potato_spawner which should spawn a new ball."
	input Explode(void) : "Makes the ball explode."
	input Dissolve(void) : "Fizzles the ball. A new one will not automatically spawn."
]
@PointClass base(CHotPotatoCatcher) studio("models/editor/axis_helper_thick.mdl") color(0 255 0) = hot_potato_catcher : "Invisible entity which can hold hot_potatos."
[
]
@PointClass base(CHotPotatoCatcher) studio("models/props/futbol_dispenser.mdl") color(0 255 0) = hot_potato_spawner : "This entity can hold and spawn hot_potatos."
[
	StartWithHotPotato(boolean) : "Start With Ball" : 1 : "Spawner will have a ball inside it when the map starts."
	IsTimed(boolean) : "Timed" : 0 : "If Yes, when a ball is grabbed, it will explode after Timer Duration. The ball will pulse between red and yellow while the timer counts down. An alarm sound will play each second while counting down. Non-timed balls spawned from another source will not become timed when interacting with this spawner. Timed balls will have their timer reset when placed in a different spawner, but will retain their original spawner's timer duration."
	Timer(float) : "Timer Duration" : 5 : "How many seconds it should take for a timed ball to explode."
	TimerIndicatorName(target_destination) : "Timer Panel" :  : "A prop_indicator_panel which will show the remaining time for a timed ball."
	input ForceSpawn(void) : "Spawns a ball in the spawner. BUG: If the spawner currently has a ball in it or one held by a player/actively moving about in the map, the spawner will become bugged and always instantly spawn a new ball whenever one is grabbed from it."
	output OnHotPotatoSpawned(void) : "Fires when a ball is spawned in the spawner."
	output OnHotPotatoCaught(void) : "Fires when a ball is caught or a new one spawned."
	output OnHotPotatoReleased(void) : "Fires when a ball is grabbed from the spawner."
]
@PointClass base(CBaseEntity) color(255 203 11) = info_camera_link : "It displays the view of a point_camera onto brushes or models. The view is saved to a texture called _rt_Camera, which must be specified as the $basetexture for the material that the view will appear on. An info_camera_link is used in the last Half-Life 2 map to create the view through the opening portal (effects/portalrift.mdl). Players are not rendered if they aren't visible to the viewing player after accounting for PVS, viewcone, and occlusion checks."
[
	PointCamera(target_destination) : "Camera Name" :  : "point_camera which the view will be taken from."
	input SetCamera(target_destination) : "Sets Camera Name."
]
@PointClass base(CBaseEntity,Parent) color(255 0 255) = info_constraint_anchor : "It is used to tell CPhysConstraints where to attach themselves relative to the objects being constrained (typically they attach at the center of mass). Set this entity as Entity 1 in the constraint, then parent this entity to Entity 2. BUG: The SetParentAttachment input doesn't work on this entity."
[
	massScale(float) : "Mass scale" : 1 : "Multiplier for the constrained object's mass. 1 = no change."
]
@PointClass base(CBaseEntity,Angles) studio("models/editor/playerstart.mdl") = info_coop_spawn : "It's a place players can spawn at in coop mode. In order for players to move in coop, a small amount of additional logic is required. Create a logic_relay with Entity Scripts set to debug_scripts/mp_coop_transition_list.nut and give it this output:/nOnSpawn / !self / RunScriptCode / SetMapBranchAndLevel()"
[
	Enabled(choices) : "Initial State" : 1 : "Should the spawn point be active when the map starts?" =
	[
		0 : "Disabled"
		1 : "Enabled"
	]
	StartingTeam(choices) : "Team" : 0 : "Who should be able to spawn here." =
	[
		0 : "Any"
		2 : "Red (P-Body)"
		3 : "Blue (ATLAS)"
	]
	input SetTeam(integer) : "Sets Team."
	input Enable(void) : "Makes the entity active."
	input Disable(void) : "Makes the entity inactive."
	input SetAsActiveSpawn(void) : "Enables this spawn and disables all others of the same team. Cannot be used on spawns that share their name with another one of the same team; at least one of those spawns will be incorrectly disabled."
]
@PointClass base(CBaseEntity,EnableDisable) color(248 155 0) = info_game_event_proxy : "It fires a game event. Usually used for showing hint messages."
[
	spawnflags(flags) =
	[
		1 : "Fire Automatically When First Seen" : 0
	]
	event_name(float) : "Name of the event to generate" :  : "An event to fire. TODO: Make a list of valid events..."
	range(float) : "Range" :  : "If using 'Fire Automatically When First Seen', this sets a limit for how far away a player can be while the entity is considered visible."
	input GenerateGameEvent(void) : "Generates the event. (This entity will be the 'subject' ent.)"
]
@PointClass base(CBaseEntity) iconsprite("editor/info_landmark") color(248 155 0) = info_landmark : "Used by trigger_transition and info_changelevel to figure out where one map is relative to another, so that it can correctly transfer objects between maps. There should be a corresponding landmark entity in the next map positioned in the same 'in-world' space. Entities will be transitioned to the next level relative to the info_landmark entities."
[
]
@PointClass base(CBaseEntity) iconsprite("editor/info_landmark") color(248 155 0) = info_landmark_entry : "This entity is a component of Portal 2's instance which is used for transitioning between maps. It apparently fills a role similar to info_landmark. This entity gives itself the targetname __p2_landmark when the map loads."
[
]
@PointClass base(CBaseEntity) iconsprite("editor/info_landmark") color(248 155 0) = info_landmark_exit : "This entity is a component of Portal 2's instance which is used for transitioning between maps. It apparently fills a role similar to info_landmark. This entity gives itself the targetname __p2_landmark when the map loads."
[
]
@PointClass base(CBaseEntity) size(-4 -4 -4, 4 4 4) color(255 0 255) = info_mass_center : "Sets the center of mass of a physics object to this entity's location. Removes itself after spawning."
[
	target(target_destination) : "Target object" :  : "Object to set the COM for. (Typically a func_physbox or prop_physics.)"
]
@PointClass base(CBaseEntity) = info_null : "It removes itself the moment it spawns. It doesn't have many uses, but one is being a target for light_spots. It's good to still eventually remove them from the VMF when no longer needed because they do still network themselves, for one tick."
[
]
@PointClass base(CBaseEntity,Angles) studio("models/editor/cone_helper.mdl") sphere(blob_spread_radius) = info_paint_sprayer : "Emits gel in a stream. To use gel, the map needs to have Paint in Map set to True in worldspawn."
[
	start_active(boolean) : "Start Active?" : 1 : "Self-explanatory."
	PaintType(choices) : "Paint Type" : 0 : "Which gel type to spray." =
	[
		0 : "Bounce"
		1 : "Reflect"
		2 : "Speed"
		3 : "Portal"
		4 : "Erase"
	]
	blobs_per_second(float) : "Blobs per second" : 10 : "How many blobs to emit in one second."
	maxblobcount(integer) : "Max number of blobs" : 250 : "Maximum number of blobs which may come from this sprayer. If the sprayer reaches this limit, it temporarily stops."
	AmbientSound(choices) : "Ambient Sound" : 2 : "Sound to make when spraying gel." =
	[
		0 : "None (silent)"
		1 : "Drip"
		2 : "Medium Flow"
		3 : "Heavy Flow"
	]
	min_speed(float) : "Min blob speed" : 100 : "Minimum speed blobs can come out at."
	max_speed(float) : "Max blob speed" : 100 : "Maximum speed blobs can come out at."
	blob_spread_radius(float) : "Blob spread radius" : 0 : "Radius of a sphere around the entity in which the spawning positions of blobs can vary. Helps blobs look realistic."
	blob_spread_angle(float) : "Blob spread angle" : 0 : "How many degrees from Pitch Yaw Roll that blobs can vary their path."
	blob_streak_percentage(float) : "Blob streak percentage" : 100 : "What percentage of blobs will streak across brushes they hit at under a 45 degree angle."
	min_streak_time(float) : "Blob min streak time" : ".2" : "Minimum time that blobs will streak for."
	max_streak_time(float) : "Blob max streak time" : ".5" : "Maximum time that blobs will streak for."
	min_streak_speed_dampen(float) : "Blob min streak speed dampen" : 500 : "Minimum amount of speed reduction to apply to streaking blobs."
	max_streak_speed_dampen(float) : "Blob max streak speed dampen" : 100 : "Maximum amount of speed reduction to apply to streaking blobs."
	silent(boolean) : "Silent?" : 0 : "Stops all sounds and visual effects and simply puts gel onto surfaces when the blobs hit something."
	DrawOnly(boolean) : "DrawOnly?" : 0 : "Stops sounds and prevents gel from actually applying to anything, so only the rendered blobs come from the sprayer."
	RenderMode(choices) : "Render Mode" :  : "How to render blobs." =
	[
		0 : "Blobulator"
		1 : "Fast Sphere (blobs don't morph together)"
	]
	input Start(void) : "Makes the sprayer start spraying gel."
	input Stop(void) : "Makes the sprayer stop spraying gel."
	input ChangePaintType(integer) : "Sets Paint Type. Bug: Does not change color of midair blobs!"
]
@PointClass base(CBaseEntity,Parent,Angles,Reflection) studio("models/editor/cone_helper.mdl") line(255 255 255, targetname, cpoint1) line(255 255 255, targetname, cpoint2) line(255 255 255, targetname, cpoint3) line(255 255 255, targetname, cpoint4) line(255 255 255, targetname, cpoint5) line(255 255 255, targetname, cpoint6) line(255 255 255, targetname, cpoint7) line(255 255 255, targetname, cpoint8) line(255 255 255, targetname, cpoint9) line(255 255 255, targetname, cpoint10) line(255 255 255, targetname, cpoint11) line(255 255 255, targetname, cpoint12) line(255 255 255, targetname, cpoint13) line(255 255 255, targetname, cpoint14) line(255 255 255, targetname, cpoint15) line(255 255 255, targetname, cpoint16) line(255 255 255, targetname, cpoint17) line(255 255 255, targetname, cpoint18) line(255 255 255, targetname, cpoint19) line(255 255 255, targetname, cpoint20) line(255 255 255, targetname, cpoint21) line(255 255 255, targetname, cpoint22) line(255 255 255, targetname, cpoint23) line(255 255 255, targetname, cpoint24) line(255 255 255, targetname, cpoint25) line(255 255 255, targetname, cpoint26) line(255 255 255, targetname, cpoint27) line(255 255 255, targetname, cpoint28) line(255 255 255, targetname, cpoint29) line(255 255 255, targetname, cpoint30) line(255 255 255, targetname, cpoint31) line(255 255 255, targetname, cpoint32) line(255 255 255, targetname, cpoint33) line(255 255 255, targetname, cpoint34) line(255 255 255, targetname, cpoint35) line(255 255 255, targetname, cpoint36) line(255 255 255, targetname, cpoint37) line(255 255 255, targetname, cpoint38) line(255 255 255, targetname, cpoint39) line(255 255 255, targetname, cpoint40) line(255 255 255, targetname, cpoint41) line(255 255 255, targetname, cpoint42) line(255 255 255, targetname, cpoint43) line(255 255 255, targetname, cpoint44) line(255 255 255, targetname, cpoint45) line(255 255 255, targetname, cpoint46) line(255 255 255, targetname, cpoint47) line(255 255 255, targetname, cpoint48) line(255 255 255, targetname, cpoint49) line(255 255 255, targetname, cpoint50) line(255 255 255, targetname, cpoint51) line(255 255 255, targetname, cpoint52) line(255 255 255, targetname, cpoint53) line(255 255 255, targetname, cpoint54) line(255 255 255, targetname, cpoint55) line(255 255 255, targetname, cpoint56) line(255 255 255, targetname, cpoint57) line(255 255 255, targetname, cpoint58) line(255 255 255, targetname, cpoint59) line(255 255 255, targetname, cpoint60) line(255 255 255, targetname, cpoint61) line(255 255 255, targetname, cpoint62) line(255 255 255, targetname, cpoint63) color(255 203 11) = info_particle_system : "Creates and controls a particle system. https://developer.valvesoftware.com/wiki/Particle_System_Overview"
[
	effect_name(string) : "Particle System Name" :  : "The name of the particle system to spawn. (Not the name of a PCF file.)"
	start_active(boolean) : "Start Active" : 1 : "Should the particles emit immediately after spawning in?"
	snapshot_file(string) : "Snapshot File Name" :  : "TODO: Unknown."
	cpoint1(target_destination) : "Control Point 1" :  : "An entity which acts as a control point for the particle system. If any value is left blank all those following it will be ignored. Control point entities must exist on the client's end. This means that most invisible entities will not work. info_target is a good entity to use. TIP: Control point 0 is the origin of the info_particle_system itself."
	cpoint1_parent(integer) : "Control Point 1's Parent" :  : "A control point entity which will act as a parent to this one."
	cpoint2(target_destination) : "Control Point 2" :  : "An entity which acts as a control point for the particle system."
	cpoint2_parent(integer) : "Control Point 2's Parent" :  : "A control point entity which will act as a parent to this one."
	cpoint3(target_destination) : "Control Point 3" :  : "An entity which acts as a control point for the particle system."
	cpoint3_parent(integer) : "Control Point 3's Parent" :  : "A control point entity which will act as a parent to this one."
	cpoint4(target_destination) : "Control Point 4" :  : "An entity which acts as a control point for the particle system."
	cpoint4_parent(integer) : "Control Point 4's Parent" :  : "A control point entity which will act as a parent to this one."
	cpoint5(target_destination) : "Control Point 5" :  : "An entity which acts as a control point for the particle system."
	cpoint5_parent(integer) : "Control Point 5's Parent" :  : "A control point entity which will act as a parent to this one."
	cpoint6(target_destination) : "Control Point 6" :  : "An entity which acts as a control point for the particle system."
	cpoint6_parent(integer) : "Control Point 6's Parent" :  : "A control point entity which will act as a parent to this one."
	cpoint7(target_destination) : "Control Point 7" :  : "An entity which acts as a control point for the particle system."
	cpoint7_parent(integer) : "Control Point 7's Parent" :  : "A control point entity which will act as a parent to this one."
	cpoint8(target_destination) : "Control Point 8" :  : "An entity which acts as a control point for the particle system."
	cpoint9(target_destination) : "Control Point 9" :  : "An entity which acts as a control point for the particle system."
	cpoint10(target_destination) : "Control Point 10" :  : "An entity which acts as a control point for the particle system."
	cpoint11(target_destination) : "Control Point 11" :  : "An entity which acts as a control point for the particle system."
	cpoint12(target_destination) : "Control Point 12" :  : "An entity which acts as a control point for the particle system."
	cpoint13(target_destination) : "Control Point 13" :  : "An entity which acts as a control point for the particle system."
	cpoint14(target_destination) : "Control Point 14" :  : "An entity which acts as a control point for the particle system."
	cpoint15(target_destination) : "Control Point 15" :  : "An entity which acts as a control point for the particle system."
	cpoint16(target_destination) : "Control Point 16" :  : "An entity which acts as a control point for the particle system."
	cpoint17(target_destination) : "Control Point 17" :  : "An entity which acts as a control point for the particle system."
	cpoint18(target_destination) : "Control Point 18" :  : "An entity which acts as a control point for the particle system."
	cpoint19(target_destination) : "Control Point 19" :  : "An entity which acts as a control point for the particle system."
	cpoint20(target_destination) : "Control Point 20" :  : "An entity which acts as a control point for the particle system."
	cpoint21(target_destination) : "Control Point 21" :  : "An entity which acts as a control point for the particle system."
	cpoint22(target_destination) : "Control Point 22" :  : "An entity which acts as a control point for the particle system."
	cpoint23(target_destination) : "Control Point 23" :  : "An entity which acts as a control point for the particle system."
	cpoint24(target_destination) : "Control Point 24" :  : "An entity which acts as a control point for the particle system."
	cpoint25(target_destination) : "Control Point 25" :  : "An entity which acts as a control point for the particle system."
	cpoint26(target_destination) : "Control Point 26" :  : "An entity which acts as a control point for the particle system."
	cpoint27(target_destination) : "Control Point 27" :  : "An entity which acts as a control point for the particle system."
	cpoint28(target_destination) : "Control Point 28" :  : "An entity which acts as a control point for the particle system."
	cpoint29(target_destination) : "Control Point 29" :  : "An entity which acts as a control point for the particle system."
	cpoint30(target_destination) : "Control Point 30" :  : "An entity which acts as a control point for the particle system."
	cpoint31(target_destination) : "Control Point 31" :  : "An entity which acts as a control point for the particle system."
	cpoint32(target_destination) : "Control Point 32" :  : "An entity which acts as a control point for the particle system."
	cpoint33(target_destination) : "Control Point 33" :  : "An entity which acts as a control point for the particle system."
	cpoint34(target_destination) : "Control Point 34" :  : "An entity which acts as a control point for the particle system."
	cpoint35(target_destination) : "Control Point 35" :  : "An entity which acts as a control point for the particle system."
	cpoint36(target_destination) : "Control Point 36" :  : "An entity which acts as a control point for the particle system."
	cpoint37(target_destination) : "Control Point 37" :  : "An entity which acts as a control point for the particle system."
	cpoint38(target_destination) : "Control Point 38" :  : "An entity which acts as a control point for the particle system."
	cpoint39(target_destination) : "Control Point 39" :  : "An entity which acts as a control point for the particle system."
	cpoint40(target_destination) : "Control Point 40" :  : "An entity which acts as a control point for the particle system."
	cpoint41(target_destination) : "Control Point 41" :  : "An entity which acts as a control point for the particle system."
	cpoint42(target_destination) : "Control Point 42" :  : "An entity which acts as a control point for the particle system."
	cpoint43(target_destination) : "Control Point 43" :  : "An entity which acts as a control point for the particle system."
	cpoint44(target_destination) : "Control Point 44" :  : "An entity which acts as a control point for the particle system."
	cpoint45(target_destination) : "Control Point 45" :  : "An entity which acts as a control point for the particle system."
	cpoint46(target_destination) : "Control Point 46" :  : "An entity which acts as a control point for the particle system."
	cpoint47(target_destination) : "Control Point 47" :  : "An entity which acts as a control point for the particle system."
	cpoint48(target_destination) : "Control Point 48" :  : "An entity which acts as a control point for the particle system."
	cpoint49(target_destination) : "Control Point 49" :  : "An entity which acts as a control point for the particle system."
	cpoint50(target_destination) : "Control Point 50" :  : "An entity which acts as a control point for the particle system."
	cpoint51(target_destination) : "Control Point 51" :  : "An entity which acts as a control point for the particle system."
	cpoint52(target_destination) : "Control Point 52" :  : "An entity which acts as a control point for the particle system."
	cpoint53(target_destination) : "Control Point 53" :  : "An entity which acts as a control point for the particle system."
	cpoint54(target_destination) : "Control Point 54" :  : "An entity which acts as a control point for the particle system."
	cpoint55(target_destination) : "Control Point 55" :  : "An entity which acts as a control point for the particle system."
	cpoint56(target_destination) : "Control Point 56" :  : "An entity which acts as a control point for the particle system."
	cpoint57(target_destination) : "Control Point 57" :  : "An entity which acts as a control point for the particle system."
	cpoint58(target_destination) : "Control Point 58" :  : "An entity which acts as a control point for the particle system."
	cpoint59(target_destination) : "Control Point 59" :  : "An entity which acts as a control point for the particle system."
	cpoint60(target_destination) : "Control Point 60" :  : "An entity which acts as a control point for the particle system."
	cpoint61(target_destination) : "Control Point 61" :  : "An entity which acts as a control point for the particle system."
	cpoint62(target_destination) : "Control Point 62" :  : "An entity which acts as a control point for the particle system."
	cpoint63(target_destination) : "Control Point 63" :  : "An entity which acts as a control point for the particle system."
	input Start(void) : "Tells the particle system to begin emitting, if it wasn't already."
	input Stop(void) : "Tells the particle system to quit emitting."
	input StopPlayEndCap(void) : "Tells the particle system to stop emitting and play its 'End Cap Effect'. TODO: What is an end cap effect?"
	input DestroyImmediately(void) : "Makes the particle system disappear immediately instead of ending how it normally would."
]
@PointClass base(CBaseEntity,Angles,EnableDisable) sphere(radius) studio("models/editor/angle_helper.mdl") color(0 255 0) = info_placement_helper : "Helps players align portals."
[
	radius(float) : "Radius" : 64 : "If the middle of a portal is inside this radius, the portal is moved to the location of this entity."
	force_placement(boolean) : "Force Placement" : 0 : "Ignores the helper's cooldown period. Normally, a helper will let a portal go anywhere inside its radius when there's already one placed perfectly on the helper, or for a few seconds after a portal is moved. This setting will force portals to always be perfectly placed."
]
@PointClass base(CBaseEntity,Toggle) iconsprite("editor/info_target") color(248 155 0) = info_player_ping_detector : "Detects coop player pings."
[
	Enabled(choices) : "Default State" : 1 : "Is this entity enabled by default or not?" =
	[
		0 : "Disabled"
		1 : "Enabled"
	]
	FuncTankName(target_destination) : "Func Tank Entity" :  : "Name of a func_tank which will turn to look at the location of the last ping."
	TeamToLookAt(choices) : "Team to Observe" : 1 : "Which player's pings to detect." =
	[
		1 : "Both"
		2 : "Orange"
		3 : "Blue"
	]
	input Enable(void) : "Makes the entity active."
	input Disable(void) : "Makes the entity inactive."
]
@PointClass base(CBaseEntity,Angles) studio("models/editor/playerstart.mdl") = info_player_start : "In singleplayer, sets where the player spawns. For coop use info_coop_spawn."
[
]
@PointClass base(CBaseEntity,Parent,Angles) studio("models/editor/cone_helper.mdl") color(255 203 11) = info_projecteddecal : "It projects a decal onto models."
[
	texture(decal) : "Texture" :  : "Texture to apply."
	Distance(float) : "Distance" : 300 : "Maximum distance from the origin to project the decal. The decal will not go through anything solid."
	input Activate(void) : "Applies the decal."
]
@PointClass base(CBaseEntity,Parent,Angles) iconsprite("editor/info_target") studioprop() = info_target : "It's a generic 'target'. Other entities can use it as a reference point for many different things."
[
	spawnflags(flags) =
	[
		1 : "Transmit to clients in PVS - Tells the player's end where the entity is if the entity is in their Potentially Visible Set." : 0
		2 : "Transmit to clients ALWAYS - Tells the client where the entity is, regardless of potentially visible status." : 0
	]
	model(studio) : "World Model" :  : "Does nothing. Meant only to serve as a reference for the proportions of something."
]
@PointClass base(CBaseEntity) decal() studio("models/editor/axis_helper_thick.mdl") color(255 203 11) = infodecal : "It adds a texture such as a sign, stain, or bullet hole onto any surface. Place them with Hammer's decal tool (Shift+D). The entity will apply the decal then remove itself if it does not have a targetname. If it does, it will wait for the Activate input. BUG: In Hammer, decals may look like they're applied to the brush a displacement came from. They will work fine in-game though, provided that they're close to the actual displacement face."
[
	texture(decal) : "Texture" :  : "The texture to apply."
	LowPriority(boolean) : "Low Priority (can be replaced)" : 0 : "Sets if this decal can be deleted for performance reasons if the map has a lot of decals in it."
	input Activate(void) : "Applies the decal, then removes the infodecal entity."
]
